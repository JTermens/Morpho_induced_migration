// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

//include <iostream>;
verbosity=0;

// PHYSICAL PARAMS
real Lc=.2;
real c=1./(Lc*Lc);
real eta=1000.; 	// VISCOSITY
real xi=0.1; 	// FRICTION
real zeta=-1; 	// CONTRACTILITY
real zi=1; 		// TRACTION
real R0=sqrt(2)*0.5*(3*Lc-zeta/zi); // INITIAL RADIUS
real cut = pi/2.; // ANGULAR LENGHT OF THE CUTTED PORTION OF THE CIRCLE

// NUMERICAL PARAMS
real obd=50.; 	// OUTER BOUNDARY MESH DENSITY
real ibd=15;  	// INNER BOUNDARY MESH DENSITY
real dt=0.05;   // TIME STEP
int Niter=201;  // NUMBER OF ITERATIONS

// SAVE PARAMS
bool bsave=0;  	// TO SAVE OR NOT
int dsave=Niter;   	// SAVE FRAME GAP
if(bsave){
	{ ofstream ff ("Params.csv") ;
		 ff.fixed;
		 ff << "L_c,eta,xi,zeta,zeta_i,R0,dt,dsave" << endl ;//
		 ff << Lc<<","<<eta<<","<<xi<<","<<zeta<<","<<zi<<","<<R0<<","<<dt<<","<<dsave<< endl ;
	}
}

mesh T,Tb;
if(R0*(1-cos(pi-cut/2.)) > 2*Lc){ // Ensures enough space for Lc
	real t0 = (pi-cut)/2.;
	real t0L = -asin((Lc-R0*sin(t0))/(R0-Lc));
	border Gamma(t=-t0,pi+t0){x=R0*cos(t);y=R0*sin(t);label=1;}
	border GammaB(t=-R0*cos(t0),R0*cos(t0)){x=t;y=-R0*sin(t0);label=1;}
  border Gamma2(t=-t0L,pi+t0L){x=(R0-Lc)*cos(t);y=(R0-Lc)*sin(t);label=2;}
	border Gamma2B(t=-(R0-Lc)*cos(t0L),(R0-Lc)*cos(t0L)){x=t;y=Lc-R0*sin(t0);label=2;}
  T=buildmesh(Gamma(obd*R0*(pi+2*t0))+GammaB(obd*2*R0*cos(t0))+Gamma2(ibd*(R0-Lc)*(pi+2*t0L))+Gamma2B(ibd*2*(R0-Lc)*cos(t0L)));
	T=change(T, rmInternalEdges=1);
	Tb=emptymesh(T);
}
else {
	cout << "The domain with R0 = "+R0+"; Lc = "+Lc+"; angle cut = "+cut+" is ill-posed." << endl;
	exit(1);
}

/* mesh T, Tb; // Circular domain
{
	border Gamma(t=0,2*pi){x=R0*cos(t);y=R0*sin(t);label=1;}
	border Gamma2(t=0,2*pi){x=(R0-Lc)*cos(t);y=(R0-Lc)*sin(t);label=2;}
	T=buildmesh(Gamma(obd*R0*2*pi)+Gamma2(ibd*(R0-Lc)*2*pi));
	T=change(T, rmInternalEdges=1);
	Tb=emptymesh(T);
} */
//mesh T = square(10, 10);


real Volume0=int2d(T)(1.); // Inital Volume of the Fluid Domain
real Volume=Volume0;
real Xcm0=int2d(T)(x)/Volume; //Initial x_cm
real Ycm0=int2d(T)(y)/Volume; //Initial y_cm
real XcmP=Xcm0;
real YcmP=Ycm0;
real Xcm=Xcm0;
real Ycm=Ycm0;

plot(T,value = true, fill = false, nbiso=64, wait=true, cmm = "adaptive mesh;  Vol0="+Volume0+",  (xcm0,yxm0)=("+Xcm0+","+Ycm0+")");
