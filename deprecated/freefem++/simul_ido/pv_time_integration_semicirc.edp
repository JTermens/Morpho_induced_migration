// PACKAGES FOR ADVANCED REMESHING SCHEME 
load "Curvature"
load "isoline"
load "gsl"

//include <iostream>;
verbosity=0;

// PHYSICAL PARAMS
real Lc=.2;
real c=1./(Lc*Lc);
real eta=1.; 	// VISCOSITY
real xi=0.1; 	// FRICTION
real zeta=-.1; 	// CONTRACTILITY
real zi=0.1; 	// TRACTION
real R0=sqrt(2)*0.5*(3*Lc-zeta/zi); // INITIAL RADIUS

// NUMERICAL PARAMS
real obd=50.; 	// OUTER BOUNDARY MESH DENSITY
real ibd=25;  	// INNER BOUNDARY MESH DENSITY 
real dt=0.1;    // TIME STEP
int Niter=100;  // NUMBER OF ITERATIONS

mesh T,Tb;
{
	border Gamma(t=0,pi){x=R0*cos(t);y=R0*sin(t);label=1;}
	border GammaB(t=-R0,R0){x=t;y=0.;label=1;}	
  	border Gamma2(t=asin(Lc/(R0-Lc)),pi-asin(Lc/(R0-Lc))){x=(R0-Lc)*cos(t);y=(R0-Lc)*sin(t);label=2;}
	border Gamma2B(t=-(R0-Lc)*cos(asin(Lc/(R0-Lc))),(R0-Lc)*cos(asin(Lc/(R0-Lc)))){x=t;y=Lc;label=2;}     
  	T=buildmesh(Gamma(obd*R0*pi)+GammaB(obd*R0*2)+Gamma2(ibd*(R0-Lc)*(pi-2.*asin(Lc/(R0-Lc))))+Gamma2B(ibd*(R0-Lc)*cos(asin(Lc/(R0-Lc)))*2));
	T=change(T, rmInternalEdges=1);
	Tb=emptymesh(T);
}
//mesh T = square(10, 10);

real Volume0=int2d(T)(1.); // Inital Volume of the Fluid Domain
real Volume=Volume0;
real Xcm0=int2d(T)(x)/Volume; //Initial x_cm
real Ycm0=int2d(T)(y)/Volume; //Initial y_cm
real XcmP=Xcm0;
real YcmP=Ycm0;
real Xcm=Xcm0;
real Ycm=Ycm0;

plot(T,value = true, fill = false, nbiso=64, wait=true, cmm = "adaptive mesh;  Vol0="+Volume0+",  (xcm0,yxm0)=("+Xcm0+","+Ycm0+")");

//FEM SPACES
fespace Pol(T, [P2, P2]); // FOR POLARITY VECTOR
fespace Pola(T, P2 ); // FOR |p| (not essential, just visualization)
fespace Vel(T, [P1b, P1b]); // FOR VELOCITY VECTOR 

//MACROS
macro pD [pD1, pD2] 	// P2 EXTENSION DIRICHLET DATA
macro p [p1, p2] 		// POLARITY VECTOR FIELD
macro q [q1, q2] 		// POLARITY TEST FUNCTIONS
macro V [V1, V2] 		// VELOCITY FIELD
macro U [U1, U2] 		// VELOCITY TEST FUNCTIONS
macro grad(u) [dx(u),dy(u)]							// GRADIENT OF SCALAR 
macro Grad(u1,u2) [dx(u1),dy(u1),dx(u2),dy(u2)] 	// GRADIENT OF VECTOR 
macro GradT(u1,u2) [dx(u1),dx(u2),dy(u1),dy(u2)] 	// GRAD VEC TRANSPOSE 
macro pp(p1,p2) [p1*p1,p1*p2,p2*p1,p2*p2] 			// ACTIVE STRESS TENSOR   

// P2 EXTENSION OF POLARITY DIRICHLET DATA
varf bndDirichlet(p, q) = on(1, p1 = N.x) + on(1, p2 = N.y);
Pol pD=[0,0];
pD1[] = bndDirichlet(0, Pol, tgv = 1.0);
plot(pD1, value = true, fill = true, nbiso=64, wait=true, cmm = "pDx");
plot(pD2, value = true, fill = true, nbiso=64, wait=true, cmm = "pDy");

// BILINEAR AND LINEAR VARIATIONAL FORMS P (Modified Homogeneous Drirchlet problem for p-pD)
varf a(p, q) = int2d(T)(  grad(p1)'*grad(q1) + grad(p2)'*grad(q2) )  + int2d(T)(c*(p'*q)) + on(1, p1 = 0.0) + on(1, p2=0.0);
varf l(p, q) = -int2d(T)( grad(pD1)'*grad(q1) + grad(pD2)'*grad(q2) ) - int2d(T)(c*(pD'*q))  + on(1, p1 = 0.0) + on(1, p2=0.0);

// ASSEMBLY P
matrix A = a(Pol, Pol, tgv = -2); // LHS matrix
real[int] b = l(0, Pol); // RHS

// P SOLUTION WITH VANISHING DIRICHLET DATA
real[int] sol(Pol.ndof);
//set(A,solver=sparsesolver);
sol=A^-1*b;
Pol p=[0,0];
p1[]=sol(0:Pol.ndof-1);
plot(T,p1, value = true, fill = true, nbiso=64, wait=true, cmm = "dpx = px-pDx");
plot(T,p2, value = true, fill = true, nbiso=64, wait=true, cmm = "dpy = py-pDy");

// P SOLUTION
p = p + pD;
plot(T,p1, value = true, fill = true, nbiso = 64, wait = true, cmm = "px");
plot(T,p2, value = true, fill = true, nbiso = 64, wait = true, cmm = "py");
plot(T,p, value = true, fill = true, nbiso = 64, wait = true, cmm = "(px,py)");

// ABS P
Pola pABS = sqrt(p1(x,y)^2 + p2(x,y)^2);
plot(T,pABS, value = true, fill = true, nbiso = 64, wait = true, cmm = "|p|");

// EXPORT DATA	
{ 	ofstream ff ("xy_pxpy.txt") ;	
	ff.fixed;
	for ( int i=0;i< T.nt ;i ++) {
			for ( int j =0; j <3; j ++) {
				ff 	<< T [i][ j ].x<<" " <<T [i][ j ].y<<" "  
					<< p1(T [i][ j ].x,T [i][ j ].y)<<" " << p2(T [i][ j ].x,T [i][ j ].y) << endl ;//
				ff <<"\n";
			}
	}
}

// BILINEAR AND LINEAR VARIATIONAL FORMS V
varf av(V, U) = int2d(T)( eta*((Grad(V1,V2)+GradT(V1,V2))'*Grad(U1,U2)) )  + int2d(T)( xi*(V'*U) ); //-viscosity-friction
varf lv(V, U) = int2d(T)( zeta*(pp(p1,p2)'*Grad(U1,U2)) ) + int2d(T)( zi*(p'*U) ); //contractility+activetraction

//ASSEMBLY V
matrix Av = av(Vel, Vel);
real[int] bv = lv(0, Vel);

// V SOLUTION
real[int] solV(Vel.ndof);
//set(Av,solver=sparsesolver);
solV=Av^-1*bv;
Vel V=[0,0];
V1[]=solV(0:Vel.ndof-1);
plot(T,V1, value = true, fill = true, nbiso = 64, wait = true, cmm = "vx");
plot(T,V2, value = true, fill = true, nbiso = 64, wait = true, cmm = "vy");
plot(T,V, value = true, fill = true, nbiso = 64, wait = true, cmm = "(vx,vy)");

// ITERATE TIME
for (int iter=0 ; iter<Niter ; iter++) {

	real Volume=int2d(T)(1.); // CURRENT AREA
	real Xcm=int2d(T)(x)/Volume; // CURRENT Xcm
	real Ycm=int2d(T)(y)/Volume; // CURRENT Ycm
	real intpx=(zi/xi)*int2d(T)(p1)/Volume; // SCALED Int p_x (TO COMPARE WITH Vcm_x)
	real intpy=(zi/xi)*int2d(T)(p2)/Volume; //SCALED Int p_y (TO COMPARE WITH Vcm_x)

	// P2 EXTENSION OF POLARITY DIRICHLET DATA
	varf bndDirichlet(p, q) = on(1, p1 = N.x) + on(1, p2 = N.y);
	Pol pD=[0,0];
	pD1[] = bndDirichlet(0, Pol, tgv = 1.0);
	// ASSEMBLY P
	varf l(p, q) = -int2d(T)( grad(pD1)'*grad(q1) + grad(pD2)'*grad(q2) ) - int2d(T)(c*(pD'*q))  + on(1, p1 = 0.0) + on(1, p2=0.0);
	matrix A = a(Pol, Pol, tgv = -2); 	// LHS MATRIX
	real[int] b = l(0, Pol); 			// RHS
	// P SOLUTION WITH VANISHING DIRICHLET DATA
	real[int] sol(Pol.ndof);
	//set(A,solver=sparsesolver);
	sol=A^-1*b;
	Pol p=[0,0];
	p1[]=sol(0:Pol.ndof-1);
	// P SOLUTION
	p = p + pD;

	// ASSEMBLY V
	varf lv(V, U) = int2d(T)( zeta*(pp(p1,p2)'*Grad(U1,U2)) ) + int2d(T)( zi*(p'*U) ); 
	matrix Av = av(Vel, Vel);  			// LHS MATRIX
	real[int] bv = lv(0, Vel);			// RHS
	// V SOLUTION
	real[int] solV(Vel.ndof);
	//set(Av,solver=sparsesolver);
	solV=Av^-1*bv;
	Vel V=[0,0];
	V1[]=solV(0:Vel.ndof-1);

	// PLOT V
	plot(T,V, value = true, fill = true, nbiso = 64, wait = false, bb=[[-1.3*R0,-0.3*R0],[1.3*R0,1.3*R0]],
			cmm = "t="+(dt*iter)+";  Vol/Vol0="+(Volume/Volume0)+", (xcm,yxm)-(xcm0,yxm0)=("+(Xcm-Xcm0)+","+(Ycm-Ycm0)
										+"), (vx,vy)=("+(Xcm-XcmP)/dt+","+(Ycm-YcmP)/dt+")"
										+"), Vol^-1(xi/xi)int p=("+intpx+","+intpy+")" );
	
	// MOVEMESH	
 	T = movemesh(T,[x+dt*V1,y+dt*V2]);

	XcmP=Xcm; // PREVIOUS Xcm
	YcmP=Ycm; // PREVIOUS Ycm
}