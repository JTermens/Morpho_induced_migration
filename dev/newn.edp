load "dfft"
load "lapack"
load "gsl"
gslrng ffrng;

//include <iostream>;
verbosity=0;

 // border a(t=0, 2*pi){x=cos(t); y=sin(t); label=1;}
 // mesh Th = buildmesh(a(100));

 mesh Th;
 	real Amp = 1/3.;		// Amplitude of the sinusoidel perturbation
 	real freq = 3.;			// Frequency
 	real shift = pi; 		// Shift
  int obd = 50;

 	border Gamma(t=0,2*pi){x=(1+Amp*sin(freq*t+shift))*cos(t); y=(1+Amp*sin(freq*t+shift))*sin(t); label=1;}
 	Th=buildmesh(Gamma(obd));

int NbBoundaryElements = Th.nbe;
int[int] bcon(NbBoundaryElements);
real[int] xx(NbBoundaryElements+1),yy(NbBoundaryElements+1);
for (int k = 0; k < NbBoundaryElements; k++){
         bcon[k] = Th.be(k)[0];
	 xx[k]=Th(Th.be(k)[0]).x; yy[k]=Th(Th.be(k)[0]).y;
}
xx[NbBoundaryElements]=xx[0]; yy[NbBoundaryElements]=yy[0];

real[int] nnx(Th.nv), nny(Th.nv); //task
nnx=0; nny=0;
for (int k = 0; k < NbBoundaryElements; k++){
  real[int] nprev(2), npost(2), nmean(2);
  real lenprev, lenpost;
  int kprev = k-1;

  if (k==0) {kprev=NbBoundaryElements-1;}

  nprev = [(yy[k]-yy[kprev]),-(xx[k]-xx[kprev])];
  lenprev = sqrt(pow(nprev[0],2)+pow(nprev[1],2));
  npost = [(yy[k+1]-yy[k]),-(xx[k+1]-xx[k])];
  lenpost = sqrt(pow(npost[0],2)+pow(npost[1],2));

  nmean = nprev/(1+lenprev/lenpost) + npost/(1+lenpost/lenprev);
  nmean /= sqrt(pow(nmean[0],2)+pow(nmean[1],2));

  nnx[bcon[k]] = nmean[0]; nny[bcon[k]] = nmean[1];
}

fespace Nh(Th,[P1,P1]);
Nh [nx,ny]; // here the Dof of nx,ny are scramble .
nx[]=0;ny[]=0;
int i=0;
for (int k = 0; k < NbBoundaryElements; k++){
	i=bcon(k);
	nx[](2*i)=nnx[i]; nx[](2*i+1)=nny[i];
}


plot(Th,[nx,ny],wait=true);

fespace Nh2(Th,[P2,P2]);
Nh2 [PD1,PD2];

  varf vn([PD1,PD2],[mx,my]) = on(1, PD1=nx,PD2=ny);

 PD1[]=vn(0.,Nh2, tgv=1.0);

plot(Th,[PD1,PD2], value = true, fill = true, nbiso = 64, wait = true);
