// 
// 
// 
// --- Imported  variables --------------------------------------------------------------------------------------------
// string rootDir;   // Absolut path of the directory where the simulatons will be saved
// string simulName; // Name of the series of simualtions (phase space exploration)
// 
// real[int] CutList;         // list of different cut
// real[int] LcList;          // list of different Lc
// real[int] GradZiList;      // list of different traction gradients
// real[int] ZetaList;        // list of diferent -contractility
// real[int] RList;           // list of different R
// real[int] LambdaList;      // list of different Lambda
// 
// string[int] CutNameList;   // list of the names given to the different cuts, good for readability 
// 
// real zi0; // offset traction, zi(y) = zi0 + GradZi*(y-Ycm)
//     
// --- Dir structure of the solutions ---------------------------------------------------------------------------------
// dir root
// |_ dir simulHome
//    |_ file params.csv
//    |_ file params_msh.csv
//    |_ file global_sol.csv
//    |_ dir msh
//    |  |_ file mesh_{1st cut name}.msh
//    |  |_ file ...
//    |  |_ file mesh_{nth cut name}.msh
//    |_ dir local_sol
//       |_ file sol_{1st cut name}_{1st GradZi}GradZi_{1st Lc}Lc_{1st Zeta}Zeta_{1st R}R_{1st Lambda}Lambda.txt
//       |_ file ...
//       |_ file sol_{nth cut name}_{nth GradZi}GradZi_{nth Lc}Lc_{nth Zeta}Zeta_{nth R}R_{nth Lambda}Lambda.txt
// --------------------------------------------------------------------------------------------------------------------

// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

// Manage command-line arguments
include "getARGV.idp"

// include <iostream>; // If needed

int iRun = getARGV("-i", 1);
bool debug = getARGV("-d", 1);
bool err = 0;

//include <iostream>;
include "parameters_sets/params_durotaxis_semicircle_exploration.edp";
include "lib/meshes.edp"; // load the mesh generation & remeshing functions

string simulHomeDir = rootDir+"/"+simulName;
string fileNameParams = "/params.csv";
string fileNameParamsMhs = "/params_msh.csv";
string fileNameGlobalSols = "/global_sols.csv";

// Lengths of each parameter list
int nCut = CutList.n;
int nGradZi = GradZiList.n;
int nLc = LcList.n;
int nZeta = ZetaList.n;
int nR = RList.n;
int nLambda = LambdaList.n;

if (iRun == 0){
  exec("mkdir "+simulHomeDir);                // Make a home directory for the simulation
  exec("mkdir "+simulHomeDir+"/msh");         // Make and save the meshes in a separeted directory
  exec("mkdir "+simulHomeDir+"/local_sols");  // Make and save the local solutions in a separeted directory

  {ofstream fileParams (simulHomeDir+fileNameParams); // Save the exploration parameters in separate file

      fileParams.fixed;

      fileParams << "pathGlobalSols" << "," << fileNameGlobalSols << endl;
      fileParams << "pathParamsMsh" << "," << fileNameParamsMhs << endl;
      // fileParams << "maxStress" << "," << maxStress << endl;
      fileParams << "zi0" << "," << zi0 << endl;
      // fileParams << "refCst" << refCst << endl;

      fileParams << "Cut"; // Save the list of cuts
      for [j, jCut:CutList]{fileParams << "," << jCut;}
      fileParams << endl;

      fileParams << "GradZi"; // Save the list of cutsMobilitat articulacions
      for [j, jGradZi:GradZiList]{fileParams << "," << jGradZi;}
      fileParams << endl;

      fileParams << "Lc"; // Save the list of La/Lc
      for [j, jLc:LcList]{fileParams << "," << jLc;}
      fileParams << endl;

      fileParams << "Zeta"; // Save the list of La/Lc
      for [j, jZeta:ZetaList]{fileParams << "," << jZeta;}
      fileParams << endl;

      fileParams << "R"; // Save the list of R/Lc
      for [j, jR:RList]{fileParams << "," << jR;}
      fileParams << endl;

      fileParams << "Lambda"; // Save the list of Lambda/Lc
      for [j, jLambda:LambdaList]{fileParams << "," << jLambda;}
      fileParams << endl;
    }

  {ofstream fileParamsMhs (simulHomeDir+fileNameParamsMhs); // Generate a separate file for the mesh parameters

    //fileParamsMhs.fixed;
    fileParamsMhs << "Mesh_Parameters" << endl
            << "cut,R,fracRarc,obd,ibd,BndLayer,CutCst,Area," << /*"xFront,yFront,xRear,yRear," << */"pathMesh" << endl;
  }

  {ofstream fileGlobalSols (simulHomeDir+fileNameGlobalSols); // Generate a separate file for the global variables (integrates ones)

    //fileGlobalSol.fixed;
    fileGlobalSols << "Global_Solutions" << endl
            << "Cut.i,"<<"GradZi.i,"<<"Lc.i,"<<"Zeta.i,"<<"R.i,"<<"Lambda.i,"
            <<"Xcm,Ycm,Pxcm,Pycm,"<</*"dPxcmdt,dPycmdt,Vxcm,Vycm,"<<*/"Vxavg,Vyavg,"<</*"Axcm,Aycm,"<<*/"Area,"
            <</*"dAreadt,"<<*/"Ix,Iy,"<</*"dIxdt,dIydt,<<"*/"avgDivV,divXcm,divYcm,divXavgcm,divYavgcm,divTermsX,divTermsY,"
            /*<<"vxFront,vyFront,vxRear,vyRear,"<<*/
            <<"MxxP,MxyP,MyyP,MxxV,MxyV,MyyV,"
            <<"MxxxP,MxxyP,MxyxP,MxyyP,MyyxP,MyyyP,MxxxV,MxxyV,MxyxV,MxyyV,MyyxV,MyyyV,"
            <<"pathMsh,pathLocalSol" << endl
            << "adim,"<<"adim,"<<"adim,"<<"adim,"<<"adim,"<<"adim,"
            <<"R,R,adim,adim,"<</*"1/tscale,1/tscale,R/tscale,R/tscale,"<<*/"R/tscale,R/tscale,"<</*"R/tscale^2,R/tscale^2,"<<*/"R^2,"
            <</*"R^2/tscale,"<<*/"R^2,R^2,"<</*"R^2/tscale,R^2/tscale,"<<*/"1/tscale,R/tscale,R/tscale,R/tscale,R/tscale,R/tscale,R/tscale,"
            /*<<"R/tscale,R/tscale,R/tscale,R/tscale,"<<*/
            <<"R^3,R^3,R^3,R^4/tscale,R^4/tscale,R^4/tscale,"
            <<"R^4,R^4,R^4,R^4,R^4,R^4,R^5/tscale,R^5/tscale,R^5/tscale,R^5/tscaleyF,R^5/tscale,R^5/tscale,"
            <<"path,path" << endl;
  }
}

//Macros
macro pD [pDx, pDy] //                              // P2 extension for Dirichlet data
macro p [px, py] //                                 // Polarity vector field
macro q [qx, qy] //                                 // Polarity test functions
macro v [vx, vy] //                                 // Velocity vector field
macro u [ux, uy] //                                 // Velocity test functions
macro normal [nx, ny] //                            // Normal vectors at the boundary (null outside of it)

macro dp [dpxdx,dpxdy,dpydx,dpydy] //               // Gradient of the polarity field
macro dq [dqxdx,dqxdy,dqydx,dqydy] //               // Gradient of the polarity test functions
macro dv [dvxdx,dvxdy,dvydx,dvydy] //               // Gradient of the velocity field
macro du [duxdx,duxdy,duydx,duydy] //               // Gradient of the velocity test functions
macro d2px [dpxdxx,dpxdxy,dpxdyx,dpxdyy] //         // Hessian of the x-polarity
macro d2py [dpydxx,dpydxy,dpydyx,dpydyy] //         // Hessian of the y-polarity
macro d2qx [dqxdxx,dqxdxy,dqxdyx,dqxdyy] //         // Hessian of the x-polarity test function
macro d2qy [dqydxx,dqydxy,dqydyx,dqydyy] //         // Hessian of the y-polarity test function
      
macro grad(u) [dx(u),dy(u)] //                      // Gradient of a sclar
macro Grad(ux,uy) [dx(ux),dy(ux),dx(uy),dy(uy)] //  // Gradient of a vector
macro GradT(ux,uy) [dx(ux),dx(uy),dy(ux),dy(uy)] // // Grad vector transpose
macro Hessian(u) [dxx(u),dxy(u),dyx(u),dyy(u)] //   // Hessian of a scalar
macro pp(px,py) [px*px,px*py,py*px,py*py] //        // Active stress tensor

for (int iCut=0; iCut<nCut; iCut++){

  string cutName = CutNameList[iCut];

  // string fileNameMsh = "-";
  // if(saveLocalSols){
  string fileNameMsh = "/msh/mesh_"+cutName+".msh";
  // }
  
  real cut = CutList[iCut]; // Cut of the circular domain

  // More shape will need othe systems, maybe a switch statement with a label for each shape?
  // Generate initial mesh (timestep 0) that, due to the adimensionalization, only depend on the cut
  real R = 1;
  real Rarc = fracRarc*R;
  mesh Th;
  real cutCst;

  if (cut < 1e-6) {
    Th = circle(obd, R, labelOut);
    cutCst = Th.measure;
  } else {
    Th = oneCutSmooth(obd,cut,R,Rarc,symmAxis,labelOut);
    cutCst = Th.measure;
  }

  // R = sqrt(refArea/areaCst);
  // Rarc = fracRarc*R;
  // Th = oneCutSmooth(obd,cut,R,Rarc,symmAxis,labelOut);

  real bLayerThickness = .2;//1/minRLc; // Only when RLc is constant

  // Extract outer boundary
  // extractborder gives bOut(3,Th.nbe+1) with 1st point == last point
  // for k in (0,Th.nbe-1): 
  //    bOut(0,k) == x coord kth vertex
  //    bOut(1,k) == y coord kth vertex
  //    bOut(2,k) == arch length at the kth vertex
  real[int,int] bMesh(3,1); real lMesh = extractborder(Th, labelOut, bMesh);

  // real[int,int] frontRear(2,2);
  // int err = computeFrontRear(bMesh, bMesh.m-1, frontRear);

  Th = closedRemesh(bMesh,lMesh,bMesh.m-1,bLayerThickness,obd,ibd,labelOut,.5,0,1); // Custom mesh adaptation
  mesh Th0 = Th; // Save Th0 as Th will be modified

  real Area0 = Th0.measure;       // Initial Area
  real Xcm0 = int2d(Th)(x)/Area0; // Initial Xcm
  real Ycm0 = int2d(Th)(y)/Area0; // Initial Ycm
  
  // if (saveLocalSols){
    {ofstream fileParamsMhs (simulHomeDir+fileNameParamsMhs, append);

      fileParamsMhs.fixed;
      fileParamsMhs << cut <<","<< R <<","<< fracRarc <<","<< obd <<","<< ibd <<","
                    << bLayerThickness <<","<< cutCst <<","<< Area0 <<","
                  /*<< frontRear(0,0) <<","<< frontRear(0,1) <<","*/
                  /*<< frontRear(1,0) <<","<< frontRear(1,1) <<","*/
                    << fileNameMsh << endl;
    }
  // }
  
  // Plot the initial mesh
  if (debug) {
    plot(Th,value = true, fill = false, nbiso=64, wait=true, cmm = "adaptive mesh;  A0="+Area0);
    }

  // Save initial mesh
  if (saveLocalSols){
    savemesh(Th,simulHomeDir+fileNameMsh);
  }

  //FEM spaces
  fespace Pol(Th, [P2, P2]);          // For polarity vector
  fespace dPol(Th,[P2,P2,P2,P2]);     // For the gradient of the polarity vector
  fespace Pola(Th, P2 );              // For |p| (not essential, just visualization)
  fespace Vel(Th, [P1b, P1b]);        // For velocity vector
  fespace dVel(Th,[P1b,P1b,P1b,P1b]); // For the gradient of the velocity vector
  // fespace Dh(Th, P1);                 // For distance function (remeshing scheme) and data exports
  fespace Nh(Th,[P1,P1]);             // For the corrected normal vector at the boundary

  for (int iGradZi=0; iGradZi<nGradZi; iGradZi++){
    for (int iLc=0; iLc<nLc; iLc++){
      for (int iZeta=0; iZeta<nZeta; iZeta++){
        for (int iR=0; iR<nR; iR++){
          for (int iLambda=0; iLambda<nLambda; iLambda++){

            Th = Th0; // Restore the mesh

            // Problem Parameters
            // Adim. with length = Lc (good for physics)
            real GradZi = GradZiList[iGradZi]; // Traction gradient
            real Lc = LcList[iLc];             // Nematic length
            real Zeta = ZetaList[iZeta];       // -Constractility
            real R = RList[iR];                // ClusterRadius
            real Lambda = LambdaList[iLambda]; // Hydrodynamic screening length, sqrt(eta/xi)

            // Durotaxis
            func zi = zi0+GradZi*R*(y-Ycm0);

            // Adim with length = Lc
            real a = -Zeta/(zi0*Lc); // Negative sign to compensate La = |zeta|/zi
            real b = R/Lambda;
            real c = R/Lc;
            func d = (zi*R)/(zi0*Lc);
            
            // string fileNameLocalSol = "-";
            // if (saveLocalSols){
              string fileNameLocalSol = "/local_sols/sol_"+cutName+"_"+(iGradZi+1)+"GradZi_"+(iLc+1)+"Lc_"+(iZeta+1)+"Zeta_"+(iR+1)+"R_"+(iLambda+1)+"Lambda.txt";
            // }
            // Simul timestep 0 with mesh Th

            // Extract the new boundary for future computations and compute its orientation
            real[int,int] bOut(3,1); real lOut = extractborder(Th, labelOut, bOut);
            int nBnd = bOut.m-1; // instead of Th.nbe to avoid problems with mesh labels

            // Retrieve the indices of the verices of bOut with the same ordering -------------------------------------------------------------------------------
            int[int] bndIndices(nBnd+1);

            int iTri;
            for (int k=0; k<nBnd; k++){
              // Find the trinagle index of the kth bnd point
              iTri = Th(bOut(0,k),bOut(1,k)).nuTriangle;

              // Find index of the kth bnd point from its triangle index
              for (int jTri=0; jTri<3; jTri++) {
                if( abs(Th[iTri][jTri].x-bOut(0,k))<1e-12 && abs(Th[iTri][jTri].y-bOut(1,k))<1e-12){
                  bndIndices(k) = Th[iTri][jTri];
                }
              }
            }

            bndIndices(nBnd) = bndIndices(0);

            // Correction of the normal vectors at the boundary
            Nh normal = [0,0]; // here the Dof of nx,ny are scramble.

            real[int] nprev(2), npost(2), nmean(2);
            int iBndElem; // index of the boundary element
            real lenprev, lenpost;
            nprev = [(bOut(1,0)-bOut(1,nBnd-1)),-(bOut(0,0)-bOut(0,nBnd-1))];
            lenprev = sqrt(pow(nprev[0],2)+pow(nprev[1],2));

            for (int k = 0; k < nBnd; k++){
              npost = [(bOut(1,k+1)-bOut(1,k)),-(bOut(0,k+1)-bOut(0,k))];
              lenpost = sqrt(pow(npost[0],2)+pow(npost[1],2));
              
              nmean = nprev*(lenpost/(lenpost+lenprev)) + npost*(lenprev/(lenprev+lenpost));
              nmean /= sqrt(pow(nmean[0],2)+pow(nmean[1],2));

              nx[](2*bndIndices(k))= nmean[0]; ny[](2*bndIndices(k)+1) = nmean[1];
              nprev = npost; lenprev = lenpost;
            }

            // P2 extension of polarity Dirichlet data
            varf bndDirichlet(pD, q) = on(labelOut, pDx = nx) + on(labelOut, pDy = ny);
            Pol pD=[0,0];
            pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

            // Bilinear and linear variational forms P (Modified Homogeneous Drirchlet problem for p-pD)
            varf ap(p, q) = int2d(Th)(
                (grad(px)'*grad(qx) + grad(py)'*grad(qy))
                + c*c*(p'*q)
              ) + on(labelOut, px = 0.0) + on(labelOut, py = 0.0);

            varf lp(p, q) = int2d(Th)(
              - (grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy))
              - c*c*(pD'*q)
            ) + on(labelOut, px = 0.0) + on(labelOut, py = 0.0);

            // Assembly P
            matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
            real[int] bp = lp(0, Pol); // RHS

            // P solution with vanishing Dirichlet data
            real[int] solP(Pol.ndof);
            //set(Ap,solver=sparsesolver);
            solP=Ap^-1*bp;
            Pol p=[0,0];
            px[]=solP(0:Pol.ndof-1);

            // P solution
            p = p + pD;

            // Bilinear and linear variational forms V
            varf av(v, u) = int2d(Th)(
              ((Grad(vx,vy)+GradT(vx,vy))'*Grad(ux,uy)) 
              + pow(b,2)*(v'*u)
            ); // -viscosity -friction

            varf lv(v, u) = int2d(Th)(
              + a*(pp(px,py)'*Grad(ux,uy)) 
              + d*(p'*u)
            ); //contractility +active traction

            // Assembly V
            matrix Av = av(Vel, Vel);
            real[int] bv = lv(0, Vel);

            // V solution
            real[int] solV(Vel.ndof);
            //set(Av,solver=sparsesolver);
            solV=Av^-1*bv;
            Vel v=[0,0];
            vx[]=solV(0:Vel.ndof-1);

            // Compute the gradient of p for the posterior analysis
            varf aGradP(dp, dq) = int2d(Th)(dp'*dq);
            varf lGradP(dp, dq) = int2d(Th)(Grad(px,py)'*dq);

            matrix AGradP = aGradP(dPol, dPol);  // LHS matrix
            real[int] bGradP = lGradP(0, dPol);  // RHS vector

            real[int] solGradP(dPol.ndof);
            solGradP=AGradP^-1*bGradP;
            dPol dp=[0,0,0,0];
            dpxdx[]=solGradP(0:dPol.ndof-1);

            // Compute the gradient of v for the posterior analysis
            varf aGradV(dv, du) = int2d(Th)(dv'*du);
            varf lGradV(dv, du) = int2d(Th)(Grad(vx,vy)'*du);

            matrix AGradV = aGradV(dVel, dVel);  // LHS matrix
            real[int] bGradV = lGradV(0, dVel);  // RHS vector

            real[int] solGradV(dVel.ndof);
            solGradV=AGradV^-1*bGradV;
            dVel dv=[0,0,0,0];
            dvxdx[]=solGradV(0:dVel.ndof-1);

            // Compute the Hessian of px for posterior analysis
            varf aHessPx(d2px,d2qx) = int2d(Th)(d2px'*d2qx);
            varf lHessPx(d2px,d2qx) = int2d(Th)(Hessian(px)'*d2qx);

            matrix AHessPx = aHessPx(dPol, dPol);  // LHS matrix
            real[int] bHessPx = lHessPx(0, dPol);  // RHS vector

            real[int] solHessPx(dPol.ndof);
            solHessPx=AHessPx^-1*bHessPx;
            dPol d2px=[0,0,0,0];
            dpxdxx[]=solHessPx(0:dPol.ndof-1);

            // Compute the Hessian of py for posterior analysis
            varf aHessPy(d2py,d2qy) = int2d(Th)(d2py'*d2qy);
            varf lHessPy(d2py,d2qy) = int2d(Th)(Hessian(py)'*d2qy);

            matrix AHessPy = aHessPy(dPol, dPol);  // LHS matrix
            real[int] bHessPy = lHessPy(0, dPol);  // RHS vector

            real[int] solHessPy(dPol.ndof);
            solHessPy=AHessPy^-1*bHessPy;
            dPol d2py=[0,0,0,0];
            dpydxx[]=solHessPy(0:dPol.ndof-1);

            // Compute the global variables that depend only on a single timeframe
            real Xcm = int2d(Th)(x)/Area0;                           // Current Xcm
            real Ycm = int2d(Th)(y)/Area0;                           // Current Ycm
            real Pxcm = int2d(Th)(zi*px)/(Area0);                    // Current P_x cm
            real Pycm = int2d(Th)(zi*py)/(Area0);                    // Current P_y cm
            real Vxavg = int2d(Th)(vx)/Area0;                        // Current avg(v_x)
            real Vyavg = int2d(Th)(vy)/Area0;                        // Current avg(v_y)
            real Ix = int2d(Th)(pow(y-Ycm,2))/Area0;                 // 2nd Moment of area with respect to x axis at the CM
            real Iy = int2d(Th)(pow(x-Xcm,2))/Area0;                 // 2nd Moment of area with respect to y axis at the CM
            real avgDivV = int2d(Th)(dvxdx+dvydy)/Area0;             // Average divergergence of the velocity
            real divXcm = int2d(Th)(x*(dvxdx+dvydy))/Area0;          // x-component of the vel's divergergence CM
            real divYcm = int2d(Th)(y*(dvxdx+dvydy))/Area0;          // y-component of the vel's divergergence CM
            real divXavgcm = Xcm*avgDivV;                            // x-component of the avg's divergergence of the velocity's CM 
            real divYavgcm = Ycm*avgDivV;                            // y-component of the avg's divergergence of the velocity's CM
            real divTermsX = int2d(Th)((x-Xcm)*(dvxdx+dvydy))/Area0; // x-component of the Vcm divergence term
            real divTermsY = int2d(Th)((y-Ycm)*(dvxdx+dvydy))/Area0; // y-component of the Vcm divergence term
            // real vxFront = vx(frontRear(0,0),frontRear(0,1));        // x-component of the local velocity at the front
            // real vyFront = vy(frontRear(0,0),frontRear(0,1));        // y-component of the local velocity at the front
            // real vxRear = vx(frontRear(1,0),frontRear(1,1));         // x-component of the local velocity at the rear
            // real vyRear = vy(frontRear(1,0),frontRear(1,1));         // x-component of the local velocity at the rear
            // Polarity Dipole
            real MxxP = int2d(Th)((x-Xcm)*px);
            real MxyP = int2d(Th)((x-Xcm)*py);
            real MyyP = int2d(Th)((y-Ycm)*py);
            // Velocity Dipole
            real MxxV = int2d(Th)((x-Xcm)*vx);
            real MxyV = int2d(Th)((x-Xcm)*vy);
            real MyyV = int2d(Th)((y-Ycm)*vy);
            // Polarity Quadrupole
            real MxxxP = int2d(Th)(pow((x-Xcm),2)*px);
            real MxxyP = int2d(Th)(pow((x-Xcm),2)*py);
            real MxyxP = int2d(Th)((x-Xcm)*(y-Ycm)*px);
            real MxyyP = int2d(Th)((x-Xcm)*(y-Ycm)*py);
            real MyyxP = int2d(Th)(pow((y-Ycm),2)*px);
            real MyyyP = int2d(Th)(pow((y-Ycm),2)*py);
            // Velocity Quadrupole
            real MxxxV = int2d(Th)(pow((x-Xcm),2)*vx);
            real MxxyV = int2d(Th)(pow((x-Xcm),2)*vy);
            real MxyxV = int2d(Th)((x-Xcm)*(y-Ycm)*vx);
            real MxyyV = int2d(Th)((x-Xcm)*(y-Ycm)*vy);
            real MyyxV = int2d(Th)(pow((y-Ycm),2)*vx);
            real MyyyV = int2d(Th)(pow((y-Ycm),2)*vy);


            if (debug) {
              cout << "{iCut,iGradZi,iLc,iZeta,iR,iLambda} = {"+iCut+", "+iGradZi+", "+iLc+", "+iZeta+", "+iR+", "+iLambda+"}; cut = "+cutName+";  Lc = "+Lc+";  -Zeta = "+Zeta+";  zi' = "+GradZi+";  R = "+R+";  lambda = "+Lambda << endl;
              Pola vABS = sqrt(vx(x,y)^2 + vy(x,y)^2);
              plot(/*Th,*/vABS,normal, 
                value = true,
                fill = true,
                nbiso = 64,
                wait = false,
                bb=[[Xcm-2,Ycm-2],[Xcm+2,Ycm+2]],
                cmm = "cut = "+cutName+";  zi' = "+GradZi+";  Lc = "+Lc+";  -Zeta = "+Zeta+";  R = "+R+";  lambda = "+Lambda
              );
            }

            // Save {px, py, vx, vy, dpxdx, dpxdy, dpydx, dpydy, dvxdx, dvxdy, dvydx, dvydy, 
            // dpxdxx, dpxdxy, dpxdyx, dpxdyy, dpydxx, dpydxy, dpydyx, dpydyy} on each vertex:
            // Memory efficient method, but needs connectivity data to reconstruct the mesh
            {ofstream fileLocalSols (simulHomeDir+fileNameLocalSol);
              
              fileLocalSols.fixed;
              int NbVertices = Th.nv;
              fileLocalSols << "# LocalSolutions" << endl
                            << "# NumFields: " << 20 << "  NumberVertices: " << NbVertices << " cut: " << cut << " a: " << a << " b: " << b << " c: " << c << endl
                            << "# px  py  vx  vy  dpxdx  dpxdy  dpydx  dpydy  dvxdx  dvxdy  dvydx  dvydy  " << "dpxdxx  dpxdxy  dpxdyx  dpxdyy  dpydxx  dpydxy  dpydyx  dpydyy" << endl;
              for (int i = 0; i < NbVertices; i++){
                fileLocalSols << px(Th(i).x,Th(i).y) << "  " << py(Th(i).x,Th(i).y)     << "  "  // {px,py}
                        << vx(Th(i).x,Th(i).y)       << "  " << vy(Th(i).x,Th(i).y)     << "  "  // {vx,vy}
                        << dpxdx(Th(i).x,Th(i).y)    << "  " << dpxdy(Th(i).x,Th(i).y)  << "  "  // {dpxdx,dpxdy}
                        << dpydx(Th(i).x,Th(i).y)    << "  " << dpydy(Th(i).x,Th(i).y)  << "  "  // {dpydx,dpydy}
                        << dvxdx(Th(i).x,Th(i).y)    << "  " << dvxdy(Th(i).x,Th(i).y)  << "  "  // {dvxdx,dvxdy}
                        << dvydx(Th(i).x,Th(i).y)    << "  " << dvydy(Th(i).x,Th(i).y)  << "  "  // {dvydx,dvydy}
                        << dpxdxx(Th(i).x,Th(i).y)   << "  " << dpxdxy(Th(i).x,Th(i).y) << "  "  // {dpxdxx,dpxdxy}
                        << dpxdyx(Th(i).x,Th(i).y)   << "  " << dpydyy(Th(i).x,Th(i).y) << "  "  // {dpxdyx,dpxdyy}
                        << dpydxx(Th(i).x,Th(i).y)   << "  " << dpydxy(Th(i).x,Th(i).y) << "  "  // {dpydxx,dpydxy}
                        << dpydyx(Th(i).x,Th(i).y)   << "  " << dpydyy(Th(i).x,Th(i).y) << endl; // {dpydyx,dpydyy}
              }
            }

            // Save Global Data (variables integratet over the domain)
            {ofstream fileGlobalSols (simulHomeDir+fileNameGlobalSols, append);
            
              // Vxavg,Vyavg,Axcm,Aycm,Area,dAreadt,Ix,Iy,dIxdt,dIydt,avgDivV,divXcm,divYcm,divXavgcm,divYavgcm,vxFront,vyFront,vxRear,vyRear,pathMsh,pathLocalSol"

              fileGlobalSols.fixed;
              fileGlobalSols << iCut      << "," << iGradZi   << ","  
                             << iLc       << "," << iZeta     << "," 
                             << iR        << "," << iLambda   << ","
                             << Xcm       << "," << Ycm       << ","
                             << Pxcm      << "," << Pycm      << ","
                           /*<< dPxcmdt   << "," << dPycmdt   << ","*/
                           /*<< Vxcm      << "," << Vycm      << ","*/
                             << Vxavg     << "," << Vyavg     << ","
                           /*<< Axcm      << "," << Aycm      << ","*/
                             << Area0     << ","/*<< dAreadt  << ","*/
                             << Ix        << "," << Iy        << "," 
                           /*<< dIxdt     << "," << dIydt     << ","*/
                             << avgDivV   << "," 
                             << divXcm    << "," << divYcm    << ","  
                             << divXavgcm << "," << divYavgcm << ","
                             << divTermsX << "," << divTermsY << ","
                           /*<< vxFront   << "," << vyFront   << ","*/  
                           /*<< vxRear    << "," << vyRear    << ","*/
                             << MxxP      << "," << MxyP      << "," << MyyP << ","
                             << MxxV      << "," << MxyV      << "," << MyyV << ","
                             << MxxxP     << "," << MxxyP     << ","  
                             << MxyxP     << "," << MxyyP     << "," 
                             << MyyxP     << "," << MyyyP     << ","
                             << MxxxV     << "," << MxxyV     << ","  
                             << MxyxV     << "," << MxyyV     << "," 
                             << MyyxV     << "," << MyyyV << ","
                             << fileNameMsh << "," << fileNameLocalSol << endl;
            }       
          }
        }
      }
    }
  }
  cout << "Cut " << cutName << " Finished!" << endl;
}


