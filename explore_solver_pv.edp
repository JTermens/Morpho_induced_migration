// 
// 
// 
// --- Imported  variables --------------------------------------------------------------------------------------------
// string rootDir; 	// Absolut path of the directory where the simulatons will be saved
// string simulName; // Name of the series of simualtions (phase space exploration)
// 
// int nCut;			// num. different cut
// real minCut;	// min. cut
// real maxCut;	// max. cut
// 
// int nLaLc;		// num. different La/Lc
// real minLaLc;	// min. La/Lc
// real maxLaLc;	// max. La/Lc
// 
// int nRLc;			// num. different R/Lc
// real minRLc;	// min. R/Lc
// real maxRLc;	// max. R/Lc
// 
// real refLambdaLc; // reference Lambda/Lc
// real adimdt;	// adimensionalized dt. As tau is not well defined, we only work with an adim dt.
// 
// --- Dir structure of the solutions ---------------------------------------------------------------------------------
// dir root
// |_ dir simulHome
//    |_ file params.csv
//		|_ file params_msh.csv
//    |_ file global_sol.csv
//    |_ dir msh
//    |  |_ file mesh_{1st cut name}.msh
//    |  |_ file ...
//    |  |_ file mesh_{nth cut name}.msh
//		|_ dir local_sol
//			 |_ file sol_{1st cut name}_{1st LaLc}LaLc_{1st RLc}RLc.txt
//			 |_ file ...
//			 |_ file sol_{nth cut name}_{nth LaLc}LaLc_{nth RLc}RLc.txt
// --------------------------------------------------------------------------------------------------------------------


// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

//include <iostream>;
include "/home/joan/Documents/Repositoris/Spontaneous_tissue_motility/explore_solver_pv.edp";


string simulHomeDir = rootDir+"/"+simulName;
string fileNameParams = "/params.csv";
string fileNameParamsMhs = "/params_msh.csv";
string fileNameGlobalSol = "/global_sol.csv";

exec("mkdir "+simulHomeDir);	// Make a home directory for the simulation
exec("mkdir "+simulHomeDir+"/msh");	// Make and save the meshes in a separeted directory
exec("mkdir "+simulHomeDir+"/local_sol");	// Make and save the local solutions in a separeted directory

{ofstream fileParams (simulHomeDir+fileNameParams); // Save the exploration parameters in separate file

	fileParams.fixed;
	fileParams << "Parameters" << endl
						 << "nCut,minCut,maxCut,nLaLc,minLaLc,maxLaLc,nRLc,minRLc,maxRLc,refLambdaLc,adimdt,tSacle,pathGlobalSol" << endl
						 << nCut 				<< "," << minCut 	<< "," << maxCut 	<< "," 
						 << nLaLc 			<< "," << minLaLc << "," << maxLaLc << "," 
						 << nRLc 				<< "," << minRLc 	<< "," << maxRLc 	<< "," 
						 << refLambdaLc << "," << adimdt	<< "," << "NaN" 	<< ","
						 << fileNameGlobalSol << endl;
}

{ofstream fileParamsMhs (simulHomeDir+fileNameParamsMhs); // Generate a separate file for the mesh parameters

  //fileParamsMhs.fixed;
	fileParamsMhs << "Mesh_Parameters" << endl
  							<< "cut,R,fracRarc,obd,ibd,BndLayer,AreaCst,Area,pathMesh" << endl;
}

{ofstream fileGlobalSol (simulHomeDir+fileNameGlobalSol); // Generate a separate file for the global variables (integrates ones)

	//fileGlobalSol.fixed;
	fileGlobalSol << "Global_Solutions" << endl
								<< "iCut,iLaLc,iRLc,Ycm,Pycm,Vycm,Aycm,Area,dAreadt,Ix,Iy,dIxdt,dIydt,avgDivV,divTermsY,pathMsh,pathLocalSol" << endl;
}

//Macros
macro pD [pDx, pDy]																// P2 extension for Dirichlet data
macro p [px, py]																	// Polarity vector field
macro q [qx, qy]																	// Polarity test functions
macro v [vx, vy]																	// Velocity vector field
macro u [ux, uy]																	// Velocity test functions

macro dp [dpxdx,dpxdy,dpydx,dpydy]								// Gradient of the polarity field
macro dq [dqxdx,dqxdy,dqydx,dqydy]								// Gradient of the polarity test functions
macro dv [dvxdx,dvxdy,dvydx,dvydy]								// Gradient of the velocity field
macro du [duxdx,duxdy,duydx,duydy]								// Gradient of the velocity test functions
			
macro grad(u) [dx(u),dy(u)]												// Gradient of a sclar
macro Grad(ux,uy) [dx(ux),dy(ux),dx(uy),dy(uy)]		// Gradient of a vector
macro GradT(ux,uy) [dx(ux),dx(uy),dy(ux),dy(uy)]	// Grad vector transpose
macro pp(px,py) [px*px,px*py,py*px,py*py]					// Active stress tensor


for (int iCut=0; iCut<nCut; iCut++){

	string cutName =	/*(iCut+1)+"pi6";*/(iCut+2)+"pi12";
	string fileNameMsh = "/msh/mesh_"+cutName+".msh";
	real cut = iCut*(maxCut-minCut)/(nCut-1) + minCut; 		// Cut of the circular domain

	// Generate initial mesh (timestep 0) that, due to the adimensionalization, only depend on the cut

	real R=1;
	real Rarc = fracRarc*R;

	// Perturbations of the circular domain with 1 cut, smoth with 1/f = 0
	// The mesh is not adaptative

	real t1 = acos((cos(cut/2.)-fracRarc)/(1-fracRarc));

	real OxPlus = (R-Rarc)*cos(AxisCut+t1);
	real OyPlus = (R-Rarc)*sin(AxisCut+t1);
	real OxMin = (R-Rarc)*cos(AxisCut-t1);
	real OyMin = (R-Rarc)*sin(AxisCut-t1);
	real LenCut = sqrt((OxPlus-OxMin)*(OxPlus-OxMin) + (OyPlus-OyMin)*(OyPlus-OyMin));


	border GammaArchMin0(t=0,1){x=OxMin+Rarc*cos(AxisCut-t1*(1-t)); y=OyMin+Rarc*sin(AxisCut-t1*(1-t)); label=1;}
	border GammaCut0(t=0,1){x=((OxMin+Rarc*cos(AxisCut))+(OxPlus-OxMin)*t);
													y=((OyMin+Rarc*sin(AxisCut))+(OyPlus-OyMin)*t);label=1;}
	border GammaArchPlus0(t=0,1){x=OxPlus+Rarc*cos(AxisCut+t1*t); y=OyPlus+Rarc*sin(AxisCut+t1*t); label=1;}
	border GammaArch0(t=0,1){x=R*cos(AxisCut+t1+2*(pi-t1)*t);
													y=R*sin(AxisCut+t1+2*(pi-t1)*t);label=1;}
													
	mesh Th = buildmesh(GammaArchMin0(obd*Rarc*t1)
										 	 +GammaCut0(obd*LenCut)
										 	 +GammaArchPlus0(obd*Rarc*t1)
										 	 +GammaArch0(obd*R*2*(pi-t1))
										 );
	real areaCst = Th.measure;

	R = sqrt(refArea/areaCst);
	Rarc = fracRarc*R;

	t1 = acos((cos(cut/2.)-fracRarc)/(1-fracRarc));

	OxPlus = (R-Rarc)*cos(AxisCut+t1);
	OyPlus = (R-Rarc)*sin(AxisCut+t1);
	OxMin = (R-Rarc)*cos(AxisCut-t1);
	OyMin = (R-Rarc)*sin(AxisCut-t1);
	LenCut = sqrt((OxPlus-OxMin)*(OxPlus-OxMin) + (OyPlus-OyMin)*(OyPlus-OyMin));


	border GammaArchMin(t=0,1){x=OxMin+Rarc*cos(AxisCut-t1*(1-t)); y=OyMin+Rarc*sin(AxisCut-t1*(1-t)); label=1;}
	border GammaCut(t=0,1){x=((OxMin+Rarc*cos(AxisCut))+(OxPlus-OxMin)*t);
													y=((OyMin+Rarc*sin(AxisCut))+(OyPlus-OyMin)*t);label=1;}
	border GammaArchPlus(t=0,1){x=OxPlus+Rarc*cos(AxisCut+t1*t); y=OyPlus+Rarc*sin(AxisCut+t1*t); label=1;}
	border GammaArch(t=0,1){x=R*cos(AxisCut+t1+2*(pi-t1)*t);
													y=R*sin(AxisCut+t1+2*(pi-t1)*t);label=1;}
													
	Th = buildmesh(GammaArchMin(obd*Rarc*t1)
									+GammaCut(obd*LenCut)
									+GammaArchPlus(obd*Rarc*t1)
									+GammaArch(obd*R*2*(pi-t1))
								);

	// Smooth the outer boundary pieces
	real[int,int] b1(3,1); real l1=extractborder(Th,1,b1); // l1 is the permiter of b1
	gslspline splineX(gslinterpakima, b1(2, :), b1(0, :)); 	// x(s) akima spline
	gslspline splineY(gslinterpakima, b1(2, :), b1(1, :)); 	// y(s) akima spline
	border Outer(t=0,l1){x=splineX(t);y=splineY(t);label=1;}
	int nO = round(obd*l1);

	// Build the new smooth mesh
	Th=buildmesh(Outer(nO),fixedborder=1);
	mesh Th0 = Th; // Save Th0 as Th will be modified

	real Area0 = Th0.measure;; // Inital Area
	
	{ofstream fileParamsMhs (simulHomeDir+fileNameParamsMhs, append);

  fileParamsMhs.fixed;
	fileParamsMhs << cut 		 <<","<< R 		 <<","<< fracRarc 	 <<","<< obd <<","< "NaN" <<","<< "NaN" <<","
								<< areaCst <<","<< Area0 <<","<< fileNameMsh << endl;
	}

	// Save initial mesh
  savemesh(Th,simulHomeDir+fileNameMsh);

	//FEM spaces
	fespace Pol(Th, [P2, P2]);					// For polarity vector
	fespace dPol(Th,[P2,P2,P2,P2]);			// For the gradient of the polarity vector
	fespace Pola(Th, P2 );							// For |p| (not essential, just visualization)
	fespace Vel(Th, [P1b, P1b]);				// For velocity vector
	fespace dVel(Th,[P1b,P1b,P1b,P1b]);	// For the gradient of the velocity vector
	fespace Dh(Th, P1);									// For distance function (remeshing scheme) and data exports
	fespace Vor(Th,P1b);								// To compute the vorticity & divergence
	fespace Nh(Th,[P1,P1]);							// For the corrected normal vector at the boundary

	for (int iLaLc=0; iLaLc<nLaLc; iLaLc++){
		for (int iRLc=0; iRLc<nRLc; iRLc++){

			// Restore the mesh
			Th = Th0;
			
			// plot(Th,value = true, fill = false, nbiso=64, wait=true, cmm = "Mesh Th, itime = 0");

			// Problem Parameters
			real a = iLaLc*(maxLaLc-minLaLc)/(nLaLc-1) + minLaLc;	// Active |zeta|/zi and Nematic length ratio, |zeta|/(zi*Lc)
			real c = iRLc*(maxRLc-minRLc)/(nRLc-1) + minRLc; 			// R and nematic length ratio, R/Lc
			real b = pow(c/refLambdaLc,2);												// R and hydrodynamic length sqrt(eta/xi) ratio, (R/lambda)^2
			real tScale = 0;
			real dt = adimdt;
			
			string fileNameLocalSol = "/local_sol/sol_"+cutName+"_"+(iLaLc+1)+"LaLc_"+(iRLc+1)+"RLc.txt";

			// Simul timestep 0 with mesh Th

			// Correction of the normal vectors at the boundary
			int NbBoundaryElements = Th.nbe;
			int[int] bcon(NbBoundaryElements);
			real[int] xx(NbBoundaryElements+1),yy(NbBoundaryElements+1);
			for (int k = 0; k < NbBoundaryElements; k++){
							bcon[k] = Th.be(k)[0];
				xx[k]=Th(Th.be(k)[0]).x; yy[k]=Th(Th.be(k)[0]).y;
			}
			xx[NbBoundaryElements]=xx[0]; yy[NbBoundaryElements]=yy[0];

			Nh [nx,ny]; // here the Dof of nx,ny are scramble.
			nx[]=0;ny[]=0;

			real[int] nprev(2), npost(2), nmean(2);
			real lenprev, lenpost;
			nprev = [(yy[0]-yy[NbBoundaryElements-1]),-(xx[0]-xx[NbBoundaryElements-1])];
			lenprev = sqrt(pow(nprev[0],2)+pow(nprev[1],2));

			for (int k = 0; k < NbBoundaryElements; k++){
				npost = [(yy[k+1]-yy[k]),-(xx[k+1]-xx[k])];
				lenpost = sqrt(pow(npost[0],2)+pow(npost[1],2));

				nmean = nprev/(1+lenprev/lenpost) + npost/(1+lenpost/lenprev);
				nmean /= sqrt(pow(nmean[0],2)+pow(nmean[1],2));

				nx[](2*bcon(k))= nmean[0]; ny[](2*bcon(k)+1) = nmean[1];
				nprev = npost; lenprev = lenpost;
			}

			// P2 extension of polarity Dirichlet data
			varf bndDirichlet(pD, q) = on(1, pDx = nx) + on(1, pDy = ny);// + on(2, px = N.x) + on(2, py = N.y);
			Pol pD=[0,0];
			pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

			// Bilinear and linear variational forms P (Modified Homogeneous Drirchlet problem for p-pD)
			varf ap(p, q) = int2d(Th)(  grad(px)'*grad(qx) + grad(py)'*grad(qy) )  + int2d(Th)(c*c*(p'*q)) + on(1, px = 0.0) + on(1, py=0.0);//+ on(2, px=0.0) + on(2, py=0.0);
			varf lp(p, q) = -int2d(Th)( grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy) ) - int2d(Th)(c*c*(pD'*q))  + on(1, px = 0.0) + on(1, py=0.0);//+ on(2, px=0.0) + on(2, py=0.0);

			// Assembly P
			matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
			real[int] bp = lp(0, Pol); // RHS

			// P solution with vanishing Dirichlet data
			real[int] solP(Pol.ndof);
			//set(Ap,solver=sparsesolver);
			solP=Ap^-1*bp;
			Pol p=[0,0];
			px[]=solP(0:Pol.ndof-1);

			// P solution
			p = p + pD;

			// Compute the gradient of p for the posterior analysis
			varf aGradP(dp, dq) = int2d(Th)(dp'*dq);
			varf lGradP(dp, dq) = int2d(Th)(Grad(px,py)'*dq);

			matrix AGradP = aGradP(dPol, dPol);		// LHS matrix
			real[int] bGradP = lGradP(0, dPol);	// RHS vector

			real[int] solGradP(dPol.ndof);
			solGradP=AGradP^-1*bGradP;
			dPol dp=[0,0,0,0];
			dpxdx[]=solGradP(0:dPol.ndof-1);

			// Bilinear and linear variational forms V
			varf av(v, u) = int2d(Th)( ((Grad(vx,vy)+GradT(vx,vy))'*Grad(ux,uy)) )  + int2d(Th)( b*(v'*u) ); // -viscosity -friction
			varf lv(v, u) = int2d(Th)( -a*(pp(px,py)'*Grad(ux,uy)) ) + int2d(Th)( c*(p'*u) ); //contractility +active traction

			// Assembly V
			matrix Av = av(Vel, Vel);
			real[int] bv = lv(0, Vel);

			// V solution
			real[int] solV(Vel.ndof);
			//set(Av,solver=sparsesolver);
			solV=Av^-1*bv;
			Vel v=[0,0];
			vx[]=solV(0:Vel.ndof-1);

			// Compute the divergence and the gradient of v for the posterior analysis

			// Divergence
			varf aDivV(DivV, g) = int2d(Th)(DivV*g);
			varf lDivV(DivV, g) = int2d(Th)((dx(vx)+dy(vy))*g);

			matrix ADivV = aDivV(Vor, Vor);		// LHS matrix
			real[int] bDivV = lDivV(0, Vor);	// RHS vector

			real[int] solDivV(Vor.ndof);
			solDivV=ADivV^-1*bDivV;
			Vor DivV=solDivV(0:Vor.ndof-1);

			// Gradient
			varf aGradV(dv, du) = int2d(Th)(dv'*du);
			varf lGradV(dv, du) = int2d(Th)(Grad(vx,vy)'*du);

			matrix AGradV = aGradV(dVel, dVel);		// LHS matrix
			real[int] bGradV = lGradV(0, dVel);	// RHS vector

			real[int] solGradV(dVel.ndof);
			solGradV=AGradV^-1*bGradV;
			dVel dv=[0,0,0,0];
			dvxdx[]=solGradV(0:dVel.ndof-1);

			// Compute the global variables that depend only on a single timeframe
			real Xcm = int2d(Th)(x)/Area0;												// Current Xcm
			real Ycm = int2d(Th)(y)/Area0;												// Current Ycm
			// real Pxcm = int2d(Th)(px)/Area0;									// Current P_x cm
			real Pycm = int2d(Th)(py)/Area0;											// Current P_y cm
			real Ix = int2d(Th)(pow(y-Ycm,2));									// 2nd Moment of area with respect to x axis at the CM
			real Iy = int2d(Th)(pow(x-Xcm,2));									// 2nd Moment of area with respect to y axis at the CM
			real avgDivV = int2d(Th)(DivV)/Area0;								// Average divergergence of the velocity
			// real divTermsX = int2d(Th)(x*(DivV-avgDivV))/Area0;	// Current value of the Div terms of V_x cm
			real divTermsY = int2d(Th)(y*(DivV-avgDivV))/Area0;	// Current value of the Div terms of V_y cm

			if (verbosity) {
				cout <<"{iCut,iLaLc,iRLc} = {"+iCut+", "+iLaLc+", "+iRLc+"}; cut = "+cutName+";	La/Lc = "+a+";	R/Lc = "+c+";	(R/lambda)^2 = "+b << endl;
				Pola vABS = sqrt(vx(x,y)^2 + vy(x,y)^2);
  			plot(/*Th,*/vABS, value = true, fill = true, nbiso = 64, wait = false, bb=[[Xcm-2,Ycm-2],[Xcm+2,Ycm+2]],
					cmm = "cut = "+cutName+";	La/Lc = "+a+";	R/Lc = "+c+";	(R/lambda)^2 = "+b);
			}

			// Save {px, py, vx, vy, dpxdx, dpxdy, dpydx, dpydy, dvxdx, dvxdy, dvydx, dvydy} on each vertex:
  		// Memory efficient method, but needs connectivity data to reconstruct the mesh
  		{ofstream fileLocalSols (simulHomeDir+fileNameLocalSol);
  			
				fileLocalSols.fixed;
  			int NbVertices = Th.nv;
  			fileLocalSols << "# LocalSolutions" << endl
											<< "# NumFields: " << 12 << "	NumberVertices: " << NbVertices << " cut: " << cut << " a: " << a << " b: " << b << " c: " << c << endl
  										<< "# px	py	vx	vy	dpxdx	dpxdy	dpydx	dpydy	dvxdx	dvxdy	dvydx	dvydy" << endl;
  			for (int i = 0; i < NbVertices; i++){
  				fileLocalSols << px(Th(i).x,Th(i).y) 		<< "	" << py(Th(i).x,Th(i).y) 		<< "	"  // {px,py}
												<< vx(Th(i).x,Th(i).y) 		<< "	" << vy(Th(i).x,Th(i).y) 		<< "	"	 // {vx,vy}
												<< dpxdx(Th(i).x,Th(i).y) << "	" << dpxdy(Th(i).x,Th(i).y) << "	"	 //	{dpxdx,dpxdy}
												<< dpydx(Th(i).x,Th(i).y) << "	" << dpydy(Th(i).x,Th(i).y) << "	"	 // {dpydx,dpydy}
												<< dvxdx(Th(i).x,Th(i).y) << "	" << dvxdy(Th(i).x,Th(i).y) << "	"	 // {dvxdx,dvxdy}
												<< dvydx(Th(i).x,Th(i).y) << "	" << dvydy(Th(i).x,Th(i).y) << endl; // {dvydx,dvydy}
  			}
  		}

			// Simul timestep +1 & +2

			// Initialize the off 0 global variables
			real[int] off0Xcm = [0,0]; 	// off 0 Xcm: Xcm of the +1, off0Xcm[0], and +2, off0Xcm[1], timesteps
			real[int] off0Ycm = [0,0];	// off 0 Ycm: idem off0Xcm
			real[int] off0Area = [0,0];	// off 0 Area: idem off0Xcm
			real[int] off0Ix = [0,0];		// off 0 Ix: idem off0Xcm
			real[int] off0Iy = [0,0];		// off 0 Iy: idem off0Xcm

			for (int iTime=0; iTime<2; iTime++){

				// Move mesh
				// real minT0 = checkmovemesh(Th, [x, y]); // to check for flipped triangles
				// real minT = checkmovemesh(Th, [x+dt*vx,y+dt*vy]);
				// cout << "Min triangle area before: "+minT0+" & after: "+minT<<endl;
				Th = movemesh(Th,[x+dt*vx,y+dt*vy]);

				// Remeshing
				// Get the outer boundary vertices (b1)
				real[int,int] b1(3,1); real l1=extractborder(Th,1,b1); // l1 is the permiter of b1
				// Vertex preserving interpolation of b1 (no remesh of outer boundary, probably best)
				border Outer(t=0,1){ P=Curve(b1,b1(2,round(t*(b1.m-1)))/l1);label=1;}
				int nO = b1.m-1; 								// keep number of elements
				//Build a new mesh
				Th=buildmesh(Outer(nO),fixedborder=1);

				// plot(Th,value = true, fill = false, nbiso=64, wait=true, cmm = "Mesh Th, itime = "+(iTime+1));
				
				// Correction of the normal vectors at the boundary
				int NbBoundaryElements = Th.nbe;
				int[int] bcon(NbBoundaryElements);
				real[int] xx(NbBoundaryElements+1),yy(NbBoundaryElements+1);
				for (int k = 0; k < NbBoundaryElements; k++){
								bcon[k] = Th.be(k)[0];
					xx[k]=Th(Th.be(k)[0]).x; yy[k]=Th(Th.be(k)[0]).y;
				}
				xx[NbBoundaryElements]=xx[0]; yy[NbBoundaryElements]=yy[0];

				Nh [nx,ny]; // here the Dof of nx,ny are scramble .
				nx[]=0;ny[]=0;

				real[int] nprev(2), npost(2), nmean(2);
				real lenprev, lenpost;
				nprev = [(yy[0]-yy[NbBoundaryElements-1]),-(xx[0]-xx[NbBoundaryElements-1])];
				lenprev = sqrt(pow(nprev[0],2)+pow(nprev[1],2));

				for (int k = 0; k < NbBoundaryElements; k++){
					npost = [(yy[k+1]-yy[k]),-(xx[k+1]-xx[k])];
					lenpost = sqrt(pow(npost[0],2)+pow(npost[1],2));

					nmean = nprev/(1+lenprev/lenpost) + npost/(1+lenpost/lenprev);
					nmean /= sqrt(pow(nmean[0],2)+pow(nmean[1],2));

					nx[](2*bcon(k))= nmean[0]; ny[](2*bcon(k)+1) = nmean[1];
					nprev = npost; lenprev = lenpost;
				}

				// P2 extension of polarity Dirichlet data
				varf bndDirichlet(pD, q) = on(1, pDx = nx) + on(1, pDy = ny);// + on(2, px = N.x) + on(2, py = N.y);
				Pol pD=[0,0];
				pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

				// Assembly P
				varf lp(p, q) = -int2d(Th)( grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy) ) - int2d(Th)(c*c*(pD'*q))  + on(1, px = 0.0) + on(1, py=0.0);
				matrix Ap = ap(Pol, Pol, tgv = -2); 	// LHS matrix
				real[int] bp = lp(0, Pol); 			// RHS

				// P solution with vanishing Dirichlet data
				real[int] sol(Pol.ndof);
				//set(Ap,solver=sparsesolvenetr);
				sol=Ap^-1*bp;
				Pol p=[0,0];
				px[]=sol(0:Pol.ndof-1);

				// P solution
				p = p + pD;

				// Assembly V
				varf lv(v, u) = int2d(Th)( -a*(pp(px,py)'*Grad(ux,uy)) ) + int2d(Th)( c*(p'*u) ); //contractility + active traction
				matrix Av = av(Vel, Vel);  			// LHS matrix
				real[int] bv = lv(0, Vel);			// RHS

				// V solution
				real[int] solV(Vel.ndof);
				//set(Av,solver=sparsesolver);
				solV=Av^-1*bv;
				Vel v=[0,0];
				vx[]=solV(0:Vel.ndof-1);

				// Compute the off 0 global variables
				off0Area[iTime] = Th.measure;												// off 0 Area: idem off0Xcm
				off0Xcm[iTime] = int2d(Th)(x)/off0Area[iTime];			// off 0 Xcm: Xcm of the +1, off0Xcm[0], and +2, off0Xcm[1], timesteps
				off0Ycm[iTime] = int2d(Th)(y)/off0Area[iTime];			// off 0 Ycm: idem off0Xcm
				off0Ix[iTime] = int2d(Th)(pow(y-off0Ycm[iTime],2));	// off 0 Ix: idem off0Xcm
				off0Iy[iTime] = int2d(Th)(pow(x-off0Xcm[iTime],2));	// off 0 Iy: idem off0Xcm
			}

			// plot(Th0,value = true, fill = false, nbiso=64, wait=true, cmm = "Mesh Th0");

			// Forward 1st and 2nd derivatives
			real Vycm = (off0Ycm[0]-Ycm)/dt;
			real Aycm = (off0Ycm[1]-2.*off0Ycm[0]+Ycm)/pow(dt,2);
			real dAreadt = (off0Area[0]-Area0)/dt;
			real dIxdt = (off0Ix[0]-Ix)/dt;
			real dIydt = (off0Iy[0]-Iy)/dt;

			// Save Global Data (variables integratet over the domain)
			{ofstream fileGlobalSol (simulHomeDir+fileNameGlobalSol, append);
				
				fileGlobalSol.fixed;
  			fileGlobalSol	<< iCut  << "," << iLaLc 	 << "," << iRLc << "," << Ycm << "," << Pycm  << "," << Vycm  << "," << Aycm 		<< "," 
											<< Area0 << "," << dAreadt << "," << Ix 	<< "," << Iy  << "," << dIxdt << "," << dIydt << "," << avgDivV << "," << divTermsY << "," 
											<< fileNameMsh << "," << fileNameLocalSol  << endl;
  		}
		}
	}
	cout << "Cut " << cutName << " Finished!" << endl;
}