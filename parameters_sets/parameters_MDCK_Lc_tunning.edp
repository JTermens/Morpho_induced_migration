// Parameter file for testing optimized sets of parameters

verbosity=0;
// bool debug=0;

//string rootDir = "/home/joan/Documents/Tesi_doct/Projects/Spontaneous_tissue_motility/Simul_runs/wetting_essay_MDCK";
string rootDir = "/home/joan/Documents/Simul_runs/MDCK_Lc_tunning/MCF10a_tension";

string[int] simulNames = [
  "MDCK_3pi3_R200_Lc40_visc10",
  "MDCK_3pi3_R200_Lc50_visc10",
  "MDCK_3pi3_R200_Lc45_visc10",
  "MDCK_3pi3_R200_Lc35_visc10",
  "MDCK_3pi3_R200_Lc30_visc10",
  "MDCK_3pi3_R200_Lc25_visc10",
  "MDCK_3pi3_R200_Lc20_visc10",
  "MDCK_3pi3_R200_Lc15_visc10",
  "MDCK_3pi3_R200_Lc10_visc10",
  "MCF10a_3pi3_R200_Lc40_gamma5"
  ];

int labelOut = 1; // Mesh identifiers
int nSimul = 10;   // Number of simulations

// Physiscal Parameters
real h = 5;                 // Monolayer heigth, [μm]
real eta = 10e3;            // Monolayer viscosity, [kPa·s]
real xi = 0.1;              // Friction coefficient, [kPa·s/μm²]
real zi = 0.02/*1*/;             // Traction coefficient, [kPa/μm],
real zeta = -0;             // -Contractility coefficient, [kPa], very low estimation
// real tscale = eta/(zi*Lc);  // Timescale corresponding to the advance of a flat front, [s]
// If surface tension
real gamma = 5.;           // Surface tension, [mN/m]=[kPa·μm]

// Nematic length, sqrt(K/a), [μm]
real[int] Lcs = [40, 50, 45, 35, 30, 25, 20, 15, 10, 40];               

// Initial radius of the monolayer [μm].
// Same as in the bigger microfabrication mask
real R0 = 282.843;

real Reff = 200;

// Numerical Parameters
real obd = 45.;           // Outer boundary mesh density
real ibd = 15.;           // Inner boundary mesh density
real dt = 5e-4;           // Adim. time step
int NiterTime = 40000;    // Number of iterations
real rateMaxArea = 4;     // Stop the simulation when Area = rateMaxArea * (Initial Area)
real rateMinArea = 1/4.;  // Stop the simulation when Area = rateMinArea * (Initial Area)
bool keepPoints = 1;      // Keep the number of boundary points upon remeshing

// If surface tension or different friction
real maxNewtonResidu = 1.e-6; // Cutoff residue for the Newtendl;on method
int maxNewtonIter = 10;       // Max num, of iterations for the Newton method

// Save parameters
bool bsave = 1; // To save or not
int dsave = 20; // Save frame gap

// Domain parameters
real cut = 3.*pi/3.; // Angular length of the cutted portion of the circle

real symmAxis = pi/2.;	// Angles of the symmetry axis of each cut
real fracRarc = 0.1;		// Adimensionalized radius used to smooth the domain vertices

if(debug){

  cout << "Simulation: " << simulNames[iSimul] << endl;
  cout << " |_ Problem lengths and timescales:" << endl;
  cout << "   |_ Reff = " << Reff << " um" << endl;
  cout << "   |_ R0 = " << R0 << " um" << endl;
  cout << "   |_ lambda = " << sqrt(eta/xi) << " um" << endl;
  cout << "   |_ Lc = " << Lcs[iSimul] << " um" << endl;
  cout << "   |_ La = " << abs(zeta/zi) << " um" << endl;
  cout << "   |_ tscale = " << eta/(zi*/*Reffs*/Lcs[iSimul]) << " s" << endl;
  cout << "   |_ charact vel = " << 3600*zi*R0*Lcs[iSimul]/eta << " um/h" << endl;
  cout << " |_ Adim. parameters:" << endl;
  cout << "   |_ a = " << abs(zeta)/(zi*R0) << endl;
  cout << "   |_ b = " << R0/sqrt(eta/xi) << endl;
  cout << "   |_ c = " << R0/Lcs[iSimul] << endl;

  cout << "\nStarting simulations " << iSimul << "..." << endl;
}
