// Get boundary isolines at different distances and save (x,y), n, p and grad(p) on it
//
// Packages for advanced remeshing scheme
load "Curvature"
load "distance"
load "isoline"
load "gsl"

verbosity=1;

// bool computePol = 1;
bool bsave = 1;

real dIso = 0.05; // number of isolines

string rootDir = "/home/joan/Documents/Tesi_doct/Projects/Spontaneous_tissue_motility/Simul_runs/optimized_params_time_evol/time_evol_2pi3_4c_Rc/msh";
string fileNameMsh = "/mesh_1000000";

string fileNameIsolines = fileNameMsh+"_isolines.csv";
string isolinesDir = "/home/joan/Documents/Tesi_doct/Projects/Spontaneous_tissue_motility/Simul_runs/optimized_params_time_evol"+fileNameMsh+"_isolines";


// Parameters
real c = 4.;
real obd = 60;
real labelOut = 1; 

mesh Th = readmesh(rootDir+fileNameMsh+".msh");

if (verbosity) {
  plot(Th,value = true, fill = false, nbiso=64, wait=true, cmm = "adaptive mesh;");
}

// Transform the mesh into a non-adaptive one to obtain a uniform concentration of triangles
// Extract outer boundary
real[int,int] bOut(3,1); real lOut = extractborder(Th, labelOut, bOut);

// Remesh the outr boundary using an Akima spline
gslspline splineX(gslinterpakima, bOut(2,:), bOut(0,:));
gslspline splineY(gslinterpakima, bOut(2,:), bOut(1,:));

border Out(t=0,lOut){x=splineX(t); y=splineY(t); label=labelOut;}
int nOut = round(obd*lOut);

Th = buildmesh(Out(nOut)); // build a uniform mesh

if (verbosity) {
  plot(Th,value = true, fill = false, nbiso=64, wait=true, cmm = "uniform mesh;");
}

if (bsave) {
  exec("mkdir "+isolinesDir);							// Make a directory for the isolines

  // save the last mesh
  savemesh(Th,isolinesDir+fileNameMsh+"_uniform.msh");

  {ofstream fileIsolines (isolinesDir+fileNameIsolines);	// Generate a separate file for the isolines
  		//fileIsolines.fixed;
			fileIsolines	<< "numIsolines,dIso,minBndCM,maxBndCM,Xcm,Ycm,Pxcm,Pycm,Area,pathOriginalMsh,pathUniformMsh" << endl;
  	}
}

// Extract boundary and connectivity elements
int NbBoundaryElements = Th.nbe;
int[int] bcon(NbBoundaryElements);
real[int] xx(NbBoundaryElements+1),yy(NbBoundaryElements+1);
for (int k = 0; k < NbBoundaryElements; k++){
          bcon[k] = Th.be(k)[0];
    xx[k]=Th(Th.be(k)[0]).x; yy[k]=Th(Th.be(k)[0]).y;
}
xx[NbBoundaryElements]=xx[0]; yy[NbBoundaryElements]=yy[0];

// Correction of the normal vectors at the boundary
fespace Nh(Th,[P1,P1]); // For the corrected normal vector at the boundary
macro n [nx,ny] // macro for the normal vectors
Nh n; // here the Dof of nx,ny are scramble .
nx[]=0;ny[]=0;

real[int] nprev(2), npost(2), nmean(2);
real lenprev, lenpost;
nprev = [(yy[0]-yy[NbBoundaryElements-1]),-(xx[0]-xx[NbBoundaryElements-1])];
lenprev = sqrt(pow(nprev[0],2)+pow(nprev[1],2));

for (int k = 0; k < NbBoundaryElements; k++){
  npost = [(yy[k+1]-yy[k]),-(xx[k+1]-xx[k])];
  lenpost = sqrt(pow(npost[0],2)+pow(npost[1],2));
  nmean = nprev*(lenpost/(lenpost+lenprev)) + npost*(lenprev/(lenprev+lenpost));
  nmean /= sqrt(pow(nmean[0],2)+pow(nmean[1],2));
  nx[](2*bcon(k))= nmean[0]; ny[](2*bcon(k)+1) = nmean[1];
  nprev = npost; lenprev = lenpost;
}


// Compute the polarity field in this mesh given a value for the parameter c
// Macros
macro pD [pDx, pDy]																// P2 extension for Dirichlet data
macro p [px, py]																	// Polarity vector field
macro q [qx, qy]																	// Polarity test functions

macro dp [dpxdx,dpxdy,dpydx,dpydy]								// Gradient of the polarity field
macro dq [dqxdx,dqxdy,dqydx,dqydy]								// Gradient of the polarity test functions

macro grad(u) [dx(u),dy(u)]												// Gradient of a sclar
macro Grad(ux,uy) [dx(ux),dy(ux),dx(uy),dy(uy)]		// Gradient of a vector

//FEM spaces
fespace Pol(Th, [P2, P2]);					// For polarity vector
fespace Pola(Th, P2 );	// For |p| (not essential, just visualization)
fespace dPol(Th,[P2,P2,P2,P2]);			// For the gradient of the polarity vector

// P2 extension of polarity Dirichlet data
varf bndDirichlet(pD, q) = on(labelOut, pDx = nx) + on(labelOut, pDy = ny);// + on(labelOut, px = N.x) + on(labelOut, py = N.y);
Pol pD=[0,0];
pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

// Bilinear and linear variational forms P (Modified Homogeneous Drirchlet problem for p-pD)
varf ap(p, q) = int2d(Th)(  grad(px)'*grad(qx) + grad(py)'*grad(qy) )  + int2d(Th)(c*c*(p'*q)) + on(labelOut, px = 0.0) + on(labelOut, py = 0.0);
varf lp(p, q) = -int2d(Th)( grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy) ) - int2d(Th)(c*c*(pD'*q))  + on(labelOut, px = 0.0) + on(labelOut, py = 0.0);

// Assembly P
matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
real[int] bp = lp(0, Pol); // RHS

// P solution with vanishing Dirichlet data
real[int] solP(Pol.ndof);
//set(Ap,solver=sparsesolver);
solP=Ap^-1*bp;
Pol p=[0,0];
px[]=solP(0:Pol.ndof-1);

// P solution
p = p + pD;

// Compute the gradient of p for the posterior analysis
varf aGradP(dp, dq) = int2d(Th)(dp'*dq);
varf lGradP(dp, dq) = int2d(Th)(Grad(px,py)'*dq);

matrix AGradP = aGradP(dPol, dPol);		// LHS matrix
real[int] bGradP = lGradP(0, dPol);	// RHS vector

real[int] solGradP(dPol.ndof);
solGradP=AGradP^-1*bGradP;
dPol dp=[0,0,0,0];
dpxdx[]=solGradP(0:dPol.ndof-1);

if (verbosity) {
  plot(Th,px, value = true, fill = true, nbiso = 64, wait = true, cmm = "px");
  plot(Th,py, value = true, fill = true, nbiso = 64, wait = true, cmm = "py");
  plot(Th,p, value = true, fill = true, nbiso = 64, wait = true, cmm = "(px,py)");
  Pola pABS = sqrt(px(x,y)^2 + py(x,y)^2); // Abs(P)
  plot(Th,pABS, value = true, fill = true, nbiso = 64, wait = true, cmm = "|p|");
}

// Export data
if(bsave==1){

  string fileNameLocalSol = "/sol_local_polarity.txt";

  // Save {px, py, dpxdx, dpxdy, dpydx, dpydy} on each vertex:
  // Memory efficient method, but needs connectivity data to reconstruct the mesh
  {ofstream fileLocalSols (isolinesDir+fileNameLocalSol);
    
    fileLocalSols.fixed;
    int NbVertices = Th.nv;
    fileLocalSols << "# LocalSolutions" << endl
                  << "# NumFields: " << 6 << "	NumberVertices: " << NbVertices << " c: " << c << endl
                  << "# px	py	dpxdx	dpxdy	dpydx	dpydy" << endl;
    for (int i = 0; i < NbVertices; i++){
      fileLocalSols << px(Th(i).x,Th(i).y) 		<< "	" << py(Th(i).x,Th(i).y) 		<< "	"  // {px,py}
                    << dpxdx(Th(i).x,Th(i).y) << "	" << dpxdy(Th(i).x,Th(i).y) << "	"	 //	{dpxdx,dpxdy}
                    << dpydx(Th(i).x,Th(i).y) << "	" << dpydy(Th(i).x,Th(i).y) << endl; // {dpydx,dpydy}
    }
  }
}

real Area0 = Th.measure; // Inital Area of the Fluid Domain
real Xcm = int2d(Th)(x)/Area0; //Initial x_cm
real Ycm = int2d(Th)(y)/Area0; //Initial y_cm
real Pxcm = int2d(Th)(px)/Area0;	// Current P_x cm
real Pycm = int2d(Th)(py)/Area0;	// Current P_y cm

// Extract the outer boundary (iso 0)
real[int,int] bBnd(3,1); real lBnd = extractborder(Th, labelOut, bBnd);
int nBnd = bBnd.m-1;

if(verbosity){
  border Boundary(t=0,1){ P=Curve(bBnd,bBnd(2,round(t*nBnd))/lBnd);}
  plot(Boundary(nBnd),value = true, fill = false, nbiso=64, wait=true, cmm = "isoline 0; distance to the bnd = 0;");
}

// Compute the normals
real[int] xxBnd(nBnd+1),yyBnd(nBnd+1);
real[int] nxBnd(nBnd),nyBnd(nBnd);
for (int k = 0; k < nBnd; k++){
    xxBnd[k]=bBnd(0,k); yyBnd[k]=bBnd(1,k);
}
xxBnd[nBnd]=xxBnd[0]; yyBnd[nBnd]=yyBnd[0];

nprev = [(yyBnd[0]-yyBnd[nBnd-1]),-(xxBnd[0]-xxBnd[nBnd-1])];
lenprev = sqrt(pow(nprev[0],2)+pow(nprev[1],2));

for (int k = 0; k < nBnd; k++){
  npost = [(yyBnd[k+1]-yyBnd[k]),-(xxBnd[k+1]-xxBnd[k])];
  lenpost = sqrt(pow(npost[0],2)+pow(npost[1],2));
  nmean = nprev*(lenpost/(lenpost+lenprev)) + npost*(lenprev/(lenprev+lenpost));
  nmean /= sqrt(pow(nmean[0],2)+pow(nmean[1],2));
  nxBnd[k]= nmean[0]; nyBnd[k] = nmean[1];
  nprev = npost; lenprev = lenpost;
}

// Compute the min distance between the bnd and the CM
real[int] distBndCM(nBnd); 
for(int i=0; i<nBnd; i++){ distBndCM(i) = sqrt(pow(bBnd(0,i)-Xcm,2)+pow(bBnd(1,i)-Ycm,2)); }
int numIsolines = floor(distBndCM.min/dIso);
if(verbosity){ cout << "Minimal distance from CM to bnd: " << distBndCM.min <<"; "<< numIsolines << " isolines with d = " << dIso << endl; }

if (bsave){
  // Save the parameters of the isolines as a header
  {ofstream fileIsolines (isolinesDir+fileNameIsolines,append);
  	//fileIsolines.fixed;
		fileIsolines	<< numIsolines << "," << dIso << "," << distBndCM.min << "," << distBndCM.max << ","
                  << Xcm << "," << Ycm << "," << Pxcm << "," << Pycm << "," << Area0 << "," << rootDir+fileNameMsh+".msh" << "," 
                  << fileNameMsh+"_uniform.msh" << endl;
    // Save the border (isoline 0)
    fileIsolines  << "iIso,xIso,yIso,nx,ny,px,py,dpxdx,dpxdy,dpydx,dpydy" << endl;
    int iIso = 0; // Isoline label
    for(int i=0; i<nBnd; i++){
      fileIsolines << iIso << "," << bBnd(0,i) << "," << bBnd(1,i) << "," << nxBnd[i] << "," << nyBnd[i] << ","
                   << px(bBnd(0,i),bBnd(1,i)) << "," << py(bBnd(0,i),bBnd(1,i)) << "," << dpxdx(bBnd(0,i),bBnd(1,i)) << "," 
                   << dpxdy(bBnd(0,i),bBnd(1,i)) << "," << dpydx(bBnd(0,i),bBnd(1,i)) << "," << dpydy(bBnd(0,i),bBnd(1,i)) << endl;
    }
  }
}

// Distance function (d is the minimal distance to the boundary)
fespace Dh(Th, P1); // For distance function (extract isolines)
varf vong(B, d)= on(labelOut,B=1);
real[int] ong=vong(0,Dh);
Dh B =1, d;
B[] = ong ? 0 : B[];
distance(Th,B,d[]);
// plot(d,Th, wait=1);

// Extract the isolines
for(int iIso=1; iIso <= numIsolines; iIso++){
  // Get the new inner boundary vertices (ISO is the contour d==iIso*dIso)
  real[int,int] bIso(3,1); int nc=isoline(Th,d,iso=iIso*dIso,close=1,bIso,smoothing=iIso*dIso*0.5,ratio=1.e0);
  int nIso = bIso.m-1; real lIso = bIso(2,nIso);

  real[int] xxIso(nIso+1),yyIso(nIso+1);
  real[int] nxIso(nIso),nyIso(nIso);
  for (int k = 0; k < nIso; k++){
      xxIso[k]=bIso(0,k); yyIso[k]=bIso(1,k);
  }
  xxIso[nIso]=xxIso[0]; yyIso[nIso]=yy[0];

  nprev = [(yyIso[0]-yyIso[nIso-1]),-(xxIso[0]-xxIso[nIso-1])];
  lenprev = sqrt(pow(nprev[0],2)+pow(nprev[1],2));

  for (int k = 0; k < nIso; k++){
    npost = [(yyIso[k+1]-yyIso[k]),-(xxIso[k+1]-xxIso[k])];
    lenpost = sqrt(pow(npost[0],2)+pow(npost[1],2));
    nmean = nprev*(lenpost/(lenpost+lenprev)) + npost*(lenprev/(lenprev+lenpost));
    nmean /= sqrt(pow(nmean[0],2)+pow(nmean[1],2));
    nxIso[k]= nmean[0]; nyIso[k] = nmean[1];
    nprev = npost; lenprev = lenpost;
  }  

  if(bsave){
    {ofstream fileIsolines (isolinesDir+fileNameIsolines,append);
  	  //fileIsolines.fixed;
      for(int i=0; i<nIso; i++){
        fileIsolines << iIso << "," << bIso(0,i) << "," << bIso(1,i) << "," << nxIso[i] << "," << nyIso[i] << ","
                   << px(bIso(0,i),bIso(1,i)) << "," << py(bIso(0,i),bIso(1,i)) << "," << dpxdx(bIso(0,i),bIso(1,i)) << "," 
                   << dpxdy(bIso(0,i),bIso(1,i)) << "," << dpydx(bIso(0,i),bIso(1,i)) << "," << dpydy(bIso(0,i),bIso(1,i)) << endl;
      }
    }
  }

  if(verbosity) {
    border Boundary(t=0,1){ P=Curve(bBnd,bBnd(2,round(t*nBnd))/lBnd);}
    border Isoline(t=0,1){ P=Curve(bIso,bIso(2,round(t*nIso))/lIso);} // Inner boundary
    plot(Boundary(nBnd),Isoline(nIso), wait=1, cmm = "isoline "+iIso+"; distance to the bnd = "+(iIso*dIso)+";");
  }
}






