// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

//include <iostream>;
verbosity=0;

// PHYSICAL PARAMS
real Lc=.2;
real eta=10.; 	// VISCOSITY
real xi=0.1; 	// FRICTION
real zeta=-1; 	// CONTRACTILITY
real zi=eta/Lc; 		// TRACTION
real gamma=0.1; // TENSION
real R0=1.2;//sqrt(2)*0.5*(3*Lc-zeta/zi); // INITIAL RADIUS
real tscale = eta/(Lc*zi);

// NUMERICAL PARAMS
real obd=50.; 	// OUTER BOUNDARY MESH DENSITY
real ibd=15;  	// INNER BOUNDARY MESH DENSITY
real dt=0.05;   // TIME STEP
int Ni=201;  // NUMBER OF ITERATIONS

// SAVE PARAMS
bool bsave=0;  	// TO SAVE OR NOT
int dsave=2;   	// SAVE FRAME GAP
if(bsave){
	{ ofstream ff ("Params.csv") ;
		 ff.fixed;
		 ff << "L_c,eta,xi,zeta,zeta_i,R0,dt,dsave" << endl ;//
		 ff << Lc<<","<<eta<<","<<xi<<","<<zeta<<","<<zi<<","<<R0<<","<<dt<<","<<dsave<< endl ;
	}
}

cout << "R0 = "<<R0<<endl;
cout << "R0/tau = "<<R0/(eta/(zi*Lc))<<endl;

// Problem Parameters
real a = abs(zeta)/(zi*Lc); 	    		// Active |zeta|/zi and Nematic length ratio
real b = R0*R0*xi/eta;	              // R0 and hydrodynamic length sqrt(eta/xi) ratio
real c = R0/Lc;  		 		 		          // R0 and nematic length ratio
real lg = gamma/(zi*Lc*R0);						// Surface tension to traction adimensionalized length

mesh T,Tb;
{
	border Gamma(t=0,pi){x=cos(t);y=sin(t);label=1;}
	border GammaB(t=-1,1){x=t;y=0.;label=1;}
  border Gamma2(t=asin((Lc/R0)/(1-(Lc/R0))),pi-asin((Lc/R0)/(1-(Lc/R0)))){x=(1-(Lc/R0))*cos(t);y=(1-(Lc/R0))*sin(t);label=2;}
	border Gamma2B(t=-(1-(Lc/R0))*cos(asin((Lc/R0)/(1-(Lc/R0)))),(1-(Lc/R0))*cos(asin((Lc/R0)/(1-(Lc/R0))))){x=t;y=(Lc/R0);label=2;}
  	T=buildmesh(Gamma(obd*pi)+GammaB(obd*2)+Gamma2(ibd*(1-(Lc/R0))*(pi-2.*asin((Lc/R0)/(1-(Lc/R0)))))+Gamma2B(ibd*(1-(Lc/R0))*cos(asin((Lc/R0)/(1-(Lc/R0))))*2));
	T=change(T, rmInternalEdges=1);
	Tb=emptymesh(T);
}
// mesh T = square(1*obd, 1*obd);
// mesh Tb=emptymesh(T);

real Volume0=int2d(T)(1.); // Inital Volume of the Fluid Domain
real Volume=Volume0;
real Xcm0=int2d(T)(x)/Volume; //Initial x_cm
real Ycm0=int2d(T)(y)/Volume; //Initial y_cm
real XcmP=Xcm0;
real YcmP=Ycm0;
real Xcm=Xcm0;
real Ycm=Ycm0;

plot(T,value = true, fill = false, nbiso=64, wait=true, cmm = "adaptive mesh;  Vol0="+Volume0+",  (xcm0,yxm0)=("+Xcm0+","+Ycm0+")");

//FEM SPACES
fespace Pol(T, [P2, P2]); 		// FOR POLARITY VECTOR
fespace Pola(T, P2 ); 			// FOR |p| (not essential, just visualization)
fespace Vel(T, [P1b, P1b]); 	// FOR VELOCITY VECTOR
fespace Dh(T, P1); 				// FOR DISTANCE FUNCTION (REMESHING SCHEME) AND DATA EXPORTS
fespace Tauh(Tb,[P0edge,P0edge]);		// FOR TANGENTS DEFINED IN CURRENT CONFIGURATION
fespace dSh(Tb,P0edge);					// FOR SURFACE ELEMENT IN CURRENT CONFIGURATION


//MACROS
macro pD [pD1, pD2] 	// P2 EXTENSION DIRICHLET DATA
macro p [p1, p2] 		// POLARITY VECTOR FIELD
macro q [q1, q2] 		// POLARITY TEST FUNCTIONS
macro V [V1, V2] 		// VELOCITY FIELD
macro U [U1, U2] 		// VELOCITY TEST FUNCTIONS
macro Vc [Vc1, Vc2] 	// EXPLICIT VELOCITY IN ITERATIVE NEWTON METHOD
macro grad(u) [dx(u),dy(u)]							// GRADIENT OF SCALAR
macro Grad(u1,u2) [dx(u1),dy(u1),dx(u2),dy(u2)] 	// GRADIENT OF VECTOR
macro GradT(u1,u2) [dx(u1),dx(u2),dy(u1),dy(u2)] 	// GRAD VEC TRANSPOSE
macro pp(p1,p2) [p1*p1,p1*p2,p2*p1,p2*p2] 			// ACTIVE STRESS TENSOR
macro tau [-N.y,N.x] 									// TANGENT IN CURRENT CONFIGURATION
macro dtau(V)	[grad(V#1)'*tau,grad(V#2)'*tau]			// DIFFERENCE IN TANGENT
macro Tau [Tau1,Tau2]									// TANGENT IN DEFORMED CONFIGURATION
macro Nc [Tau2,-Tau1]									// NORMAL IN DEFORMED CONFIGURATION
macro dTau [dTau1,dTau2]								// VECTOR TEST FUNCTION ON BOUNDARY ELEMENTS (to compute Tau)


// P2 EXTENSION OF POLARITY DIRICHLET DATA
varf bndDirichlet(p, q) = on(1, p1 = N.x) + on(1, p2 = N.y);
Pol pD=[0,0];
pD1[] = bndDirichlet(0, Pol, tgv = 1.0);
plot(pD1, value = true, fill = true, nbiso=64, wait=true, cmm = "pDx");
plot(pD2, value = true, fill = true, nbiso=64, wait=true, cmm = "pDy");

// BILINEAR AND LINEAR VARIATIONAL FORMS P (Modified Homogeneous Drirchlet problem for p-pD)
varf ap(p, q) = int2d(T)(  grad(p1)'*grad(q1) + grad(p2)'*grad(q2) )  + int2d(T)(c*c*(p'*q)) + on(1, p1 = 0.0) + on(1, p2=0.0);
varf lp(p, q) = -int2d(T)( grad(pD1)'*grad(q1) + grad(pD2)'*grad(q2) ) - int2d(T)(c*c*(pD'*q))  + on(1, p1 = 0.0) + on(1, p2=0.0);

// ASSEMBLY P
matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
real[int] bp = lp(0, Pol); // RHS

// P SOLUTION WITH VANISHING DIRICHLET DATA
real[int] sol(Pol.ndof);
//set(A,solver=sparsesolver);
sol=Ap^-1*bp;
Pol p=[0,0];
p1[]=sol(0:Pol.ndof-1);
plot(T,p1, value = true, fill = true, nbiso=64, wait=true, cmm = "dpx = px-pDx");
plot(T,p2, value = true, fill = true, nbiso=64, wait=true, cmm = "dpy = py-pDy");

// P SOLUTION
p = p + pD;
plot(T,p1, value = true, fill = true, nbiso = 64, wait = true, cmm = "px");
plot(T,p2, value = true, fill = true, nbiso = 64, wait = true, cmm = "py");
plot(T,p, value = true, fill = true, nbiso = 64, wait = true, cmm = "(px,py)");

// ABS P
Pola pABS = sqrt(p1(x,y)^2 + p2(x,y)^2);
plot(T,pABS, value = true, fill = true, nbiso = 64, wait = true, cmm = "|p|");

// EXPORT DATA
{ 	ofstream ff ("xy_pxpy.txt") ;
	ff.fixed;
	for ( int i=0;i< T.nt ;i ++) {
			for ( int j =0; j <3; j ++) {
				ff 	<< T [i][ j ].x<<" " <<T [i][ j ].y<<" "
					<< p1(T [i][ j ].x,T [i][ j ].y)<<" " << p2(T [i][ j ].x,T [i][ j ].y) << endl ;//
				ff <<"\n";
			}
	}
}

// BILINEAR AND LINEAR VARIATIONAL FORMS V
varf av(V, U) = int2d(T)( ((Grad(V1,V2)+GradT(V1,V2))'*Grad(U1,U2)) )  + int2d(T)( b*(V'*U) ); //-viscosity-friction
varf lv(V, U) = int2d(T)( -a*(pp(p1,p2)'*Grad(U1,U2)) ) + int2d(T)( c*(p'*U) ); //contractility+activetraction
// SURFACE TENSION (IMPLICIT CURVATURE SCHEME)
Vel Vc;
Tauh Tau,dTau;
dSh	ds;
varf asurface(V,U)=int1d(T,1,qforder=2)(lg*dt*
					((dtau(V)'*Nc)*(dtau(U)'*Nc)
					+1.*(dtau(V)'*Tau)*(dtau(U)'*Tau))/ds);
varf lsurface(V,U)=
				-int1d(T,1,qforder=2)(lg*Tau'*dtau(U))
				+int1d(T,1,qforder=2)(lg*dt*
                    ((dtau(Vc)'*Nc)*(dtau(U)'*Nc)
                    +1*(dtau(Vc)'*Tau)*(dtau(U)'*Tau))/ds)
				//+int2d(ThFluid)([g,0]'*[U1,U2]) // GRAVITY
					;

	// ASSEMBLY V
	matrix Av = av(Vel, Vel);
	real[int] bv = lv(0, Vel);
	real[int] solV(Vel.ndof);
	real vsquare;
	real residu=2;
	int iter=0;
	Vel V=[0,0];
	// NEWTON LOOP
	while(residu>1.e-6 && iter<10)
	{
		Vc=V; // SET THE EXPLICIT VELOCITY
		// COMPUTE TANGENT IN DEFORMED CONFIG
		solve compute(Tau,dTau)=
			intalledges(Tb)(Tau'*dTau)-intalledges(Tb)((tau+dt*[grad(Vc1),grad(Vc2)]*tau)'*dTau);

		ds=sqrt(Tau'*Tau)+1.e-12;
		Tau=(1./ds)*Tau;
		// ADD SURFACE TENSION TO THE PROBLEM
		matrix Asurface=asurface(Vel,Vel);	// Stabilziation for the surface tension
		real[int] Lsurface=lsurface(0,Vel) ;	// Surface tension + stabilization residual term
		Av=Av+Asurface;
		bv=bv+Lsurface;
		// V SOLUTION
		set(Av,solver=sparsesolver);
		solV=Av^-1*bv;
		//V=[0,0];
		V1[]=solV(0:Vel.ndof-1);
		// COMPUTE RESIDU (V-Vc)^2 FOR CONVERGENCE TEST
		{
			residu=int2d(T)(V'*V+ Vc'*Vc-2.* V'*Vc);
			cout<<"residu="<<residu<<endl;
		}
		iter++;
	}

plot(T,V1, value = true, fill = true, nbiso = 64, wait = true, cmm = "vx");
plot(T,V2, value = true, fill = true, nbiso = 64, wait = true, cmm = "vy");
plot(T,V, value = true, fill = true, nbiso = 64, wait = true, cmm = "(vx,vy)");

// ITERATE TIME
for (int ni=0 ; ni<Ni ; ni++) {

	real Volume=int2d(T)(1.); // CURRENT AREA
	real Xcm=int2d(T)(x)/Volume; // CURRENT Xcm
	real Ycm=int2d(T)(y)/Volume; // CURRENT Ycm
	real intpx=(zi/xi)*int2d(T)(p1)/Volume; // SCALED Int p_x (TO COMPARE WITH Vcm_x)
	real intpy=(zi/xi)*int2d(T)(p2)/Volume; //SCALED Int p_y (TO COMPARE WITH Vcm_x)

	// P2 EXTENSION OF POLARITY DIRICHLET DATA
	varf bndDirichlet(p, q) = on(1, p1 = N.x) + on(1, p2 = N.y);
	Pol pD=[0,0];
	pD1[] = bndDirichlet(0, Pol, tgv = 1.0);
	// ASSEMBLY P
	varf lp(p, q) = -int2d(T)( grad(pD1)'*grad(q1) + grad(pD2)'*grad(q2) ) - int2d(T)(c*c*(pD'*q))  + on(1, p1 = 0.0) + on(1, p2=0.0);
	matrix Ap = ap(Pol, Pol, tgv = -2); 	// LHS MATRIX
	real[int] bp = lp(0, Pol); 			// RHS
	// P SOLUTION WITH VANISHING DIRICHLET DATA
	real[int] sol(Pol.ndof);
	//set(A,solver=sparsesolver);
	sol=Ap^-1*bp;
	Pol p=[0,0];
	p1[]=sol(0:Pol.ndof-1);
	// P SOLUTION
	p = p + pD;

	// ASSEMBLY V
	varf lv(V, U) = int2d(T)( -a*(pp(p1,p2)'*Grad(U1,U2)) ) + int2d(T)( c*(p'*U) ); //contractility+activetraction
	matrix Av = av(Vel, Vel);
	real[int] bv = lv(0, Vel);
	real[int] solV(Vel.ndof);
	real vsquare;
	real residu=2;
	int iter=0;
	Vel V=[0,0];
	// NEWTON LOOP
	while(residu>1.e-6 && iter<10)
	{
		Vc=V; // SET THE EXPLICIT VELOCITY
		// COMPUTE TANGENT IN DEFORMED CONFIG
		solve compute(Tau,dTau)=
			intalledges(Tb)(Tau'*dTau)-intalledges(Tb)((tau+dt*[grad(Vc1),grad(Vc2)]*tau)'*dTau);
		ds=sqrt(Tau'*Tau)+1.e-12;
		Tau=(1./ds)*Tau;
		// ADD SURFACE TENSION TO THE PROBLEM
		matrix Asurface=asurface(Vel,Vel);	// Stabilziation for the surface tension
		real[int] Lsurface=lsurface(0,Vel) ;	// Surface tension + stabilization residual term
		Av=Av+Asurface;
		bv=bv+Lsurface;
		// V SOLUTION
		set(Av,solver=sparsesolver);
		solV=Av^-1*bv;
		V=[0,0];
		V1[]=solV(0:Vel.ndof-1);
		// COMPUTE RESIDU (V-Vc)^2 FOR CONVERGENCE TEST
		{
			residu=int2d(T)(V'*V+ Vc'*Vc-2.* V'*Vc);
			cout<<"residu="<<residu<<endl;
		}
		iter++;
	}

	// PLOT V
	plot(T,V, value = true, fill = true, nbiso = 64, wait = false, bb=[[-1.3,-1.3],[1.3,1.3]],
			cmm = "t="+(dt*ni)+";  Vol/Vol0="+(Volume/Volume0)+", (xcm,yxm)-(xcm0,yxm0)=("+(Xcm-Xcm0)+","+(Ycm-Ycm0)
										+"), (vx,vy)=("+(Xcm-XcmP)/dt+","+(Ycm-YcmP)/dt+")"
										+"), Vol^-1(xi/xi)int p=("+intpx+","+intpy+")" );

	// EXPORT DATA
	if(ni % dsave == 0 && bsave==1){
				savemesh(T,"LastMesh.msh"); 					// TO LOAD AND RESTART SIMULATION FROM LAST CONFIGURATION
				ofstream ff ("Rend"+(1000000+iter)+".txt") ; 	// SAVE {x, y, p1(x,y), p2(x,y), V1(x,y), V2(x,y)} ON EACH TRIANGLE TRIPLET (convienient but many duplicates)
				ff.fixed;
				for ( int i=0;i< T . nt ;i ++){
					for ( int j =0; j <3; j ++){
						ff << T [i][ j ].x<<" " <<T [i][ j ].y<<" "
							<< p1(T [i][ j ].x,T [i][ j ].y)<<" " << p2(T [i][ j ].x,T [i][ j ].y)<<" "
							<< V1(T [i][ j ].x,T [i][ j ].y)<<" " << V2(T [i][ j ].x,T [i][ j ].y) << endl ;//
						ff <<"\n";
					}
				}
	}

	// MOVE MESH
 	T = movemesh(T,[x+dt*V1,y+dt*V2]);

	// REMESHING - OPTIONAL (choose between A.1(a)-(c) for outer and between B.3(a)-(c) for inner)
		// A.1. GET OUTER BOUNDARY VERTICES (b1)
		real[int,int] b1(3,1); real l1=extractborder(T,1,b1); // l1 is the permiter of b1
		// A.2(a). LINEAR INTERPOLATION OF b1 (simple and robust, but bad for preserving shape integrity)
	/*	border Outer(t=0,1){ P=Curve(b1,t);label=1;}
		int nO = round(obd*l1);  */						// new number of elements (prescribed density obd)
		// A.2(b). VERTEX PRESERVING INTERPOLATION OF b1 (no remesh of outer boundary, probably best)
		border Outer(t=0,1){ P=Curve(b1,b1(2,round(t*(b1.m-1)))/l1);label=1;}
		int nO = b1.m-1; 								// keep number of elements
	    // A.2(c). SPLINE INTERPOLATION OF b1 (for remeshing outer boundary smoothly)
	/*	gslspline splineX(gslinterpakima, b1(2, :), b1(0, :)); 	// x(s) akima spline
		gslspline splineY(gslinterpakima, b1(2, :), b1(1, :)); 	// y(s) akima spline
		border Outer(t=0,l1){x=splineX(t);y=splineY(t);label=1;}
		int nO = round(obd*l1);  */						// new number of elements (prescribed density obd)
		// B.1. DISTANCE FUNCTION (d is the minimal distance to the boundary)
		varf vong(B, d)= on(1,B=1);
		real[int] ong=vong(0,Dh);
		Dh B =1, d;
		B[] = ong ? 0 : B[];
		distance(T,B,d[]);
		// B.2. GET NEW INNER BOUNDARY VERTICES (ISO is the contour d==Lc)
		real[int,int] ISO(3,1); int nc=isoline(T,d,iso=Lc,close=1,ISO,smoothing=Lc/2.,ratio=1.e-0);
		real l2=ISO(2,ISO.m-1); // l2 is the perimeter of ISO
		// B.3(a). LINEAR INTERPOLATION OF ISO (simple and robust)
		border Inner(t=0,1){ P=Curve(ISO,t);label=2;}
		int nI = round(ibd*l2); 						// new number of elements (prescribed density ibd)
		// B.3(b). VERTEX PRESERVING INTERPOLATION OF ISO (not ideal for this purpose, as we wish to impose uniform internal density)
	/*	border Inner(t=0,1){ P=Curve(ISO,ISO(2,round(t*(ISO.m-1)))/l2);label=2;}
		int nI = ISO.m-1;  */ 							// keep number of elements
		// B.3(c). SPLINE INTERPOLATION OF ISO (for remeshing inner boundary smoothly, probably overkill for this purpose)
	/*	gslspline splineXISO(gslinterpakima, ISO(2, :), ISO(0, :)); 	// x(s) akima spline
		gslspline splineYISO(gslinterpakima, ISO(2, :), ISO(1, :)); 	// y(s) akima spline
		border Inner(t=0,l2){x=splineXISO(t);y=splineYISO(t);label=2;}
		int nI = round(ibd*l2);  */						// new number of elements (prescribed density ibd)
		// C. BUILD NEW MESH
		T=buildmesh(Outer(nO)+Inner(nI),fixedborder=1);
		T=change(T,rmInternalEdges=1);

	XcmP=Xcm; // PREVIOUS Xcm
	YcmP=Ycm; // PREVIOUS Ycm
}
