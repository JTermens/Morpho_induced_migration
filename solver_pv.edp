// Packages for advanced remeshing scheme
load "Curvature"
load "distance"
load "isoline"
load "gsl"

// Manage command-line arguments
include "getARGV.idp"

// include <iostream>; // If needed

int iSimul = getARGV("-i", 1);
bool debug = getARGV("-d", 1);
bool err = 0;

include "parameters_sets/parameters_test.edp"; // load the parameters
// include "parameters_sets/parameters_wetting_essay.edp"; // load the parameters
include "lib/meshes.edp"; // load the mesh generation & remeshing functions


// Problem length & timescales ----------------------------------------------------------------------------------------
real cut = cuts[iSimul];            // Initial cut (archlength of the perturbation)
real R0 = R0s[iSimul];              // Initial radius
real Reff = Reffs[iSimul];          // Effective radius
real Lc = Lcs[iSimul];
real lambda = sqrt(eta/xi);         // hydrodynamic sceening length
real La = zeta/zi;             // active length; < 0 (> 0) for contractile (extensile) stress
real tscale = eta/(zi*Lc);          // Problem timescale
// real R0 = sqrt(pi/areaCst);         // Adimensionalized radius so that adim Area = pi
// real tscale = eta/(zi*Reffs[i]);    // Problem timescale


// Problem Parameters
real a = La/Lc;             // Active length, zeta/zi, and effective radius ratio
real b = R0/lambda;         // Effective radius and hydrodynamic length, sqrt(eta/xi), ratio
real c = R0/Lc;             // Effective radius and nematic length ratio
real bLayerThickness = 1/c; // Adim. nematic length
//---------------------------------------------------------------------------------------------------------------------


// Construct the mesh -------------------------------------------------------------------------------------------------
mesh Th = oneCutSmooth(obd,cut,1,fracRarc,symmAxis,labelOut);

// Extract outer boundary
// extractborder gives bOut(3,Th.nbe+1) with 1st point == last point
// for k in (0,Th.nbe-1): 
//		bOut(0,k) == x coord kth vertex
//		bOut(1,k) == y coord kth vertex
//		bOut(2,k) == arch length at the kth vertex
real[int,int] bMesh(3,1); real lMesh = extractborder(Th, labelOut, bMesh);

Th = closedRemesh(bMesh,lMesh,bMesh.m-1,bLayerThickness,obd,ibd,labelOut,.5,0,1); // Custom mesh adaptation

// Initial variables for shape characterization
real Area0 = Th.measure; // Inital Area of the Fluid Domain
real Xcm0 = int2d(Th)(x)/Area0; //Initial x_cm
real Ycm0 = int2d(Th)(y)/Area0; //Initial y_cm

if (debug) {
  plot(
    Th,value = true, fill = false, nbiso=64, wait=true, 
    cmm = "adaptive mesh;  A0="+Area0+",  (xcm0,yxm0)=("+Xcm0+","+Ycm0+")"
  );
}
//---------------------------------------------------------------------------------------------------------------------


// Import a mesh ------------------------------------------------------------------------------------------------------
// mesh Th = readmesh(rootDir+"/time_evol_2pi3_4c_Rc_test/msh/mesh_1000190"+".msh"); // begin from an imported mesh
// // Th = change(Th, rmInternalEdges=1);

// real[int,int] bMesh(3,1); real lMesh = extractborder(Th, labelOut, bMesh);

// // if (debug) { // Plot the boundary, usefull to detect mesh problems
// //   border Outer(t=0,1){ P=Curve(bMesh,bMesh(2,round(t*(bMesh.m-1)))/lMesh);label=labelOut;}
// //   int nMesh = bMesh.m-1; 								// keep number of elements
// //   plot(Outer(nMesh),value = true, fill = false, nbiso=64, wait=true, cmm = "imported boundary;");
// // }

// // Initial variables for shape characterization
// real Area0 = Th.measure; // Inital Area of the Fluid Domain
// real Xcm0 = int2d(Th)(x)/Area0; //Initial x_cm
// real Ycm0 = int2d(Th)(y)/Area0; //Initial y_cm

// if (debug) {
//   plot(Th,value = true, fill = false, nbiso=64, wait=true, cmm = "imported mesh;  A0="+Area0+",  (xcm0,yxm0)=("+Xcm0+","+Ycm0+")");
// }
//---------------------------------------------------------------------------------------------------------------------

// Create folder structure, parameters' file & header of the global solutions' file -----------------------------------
if (bsave){
  string simulHomeDir = rootDir+"/"+simulNames[iSimul];
  string fileNameParams = "/params.csv";
  string fileNameGlobalSol = "/global_sol.csv";

  exec("mkdir "+simulHomeDir);							// Make a home directory for the simulation
  exec("mkdir "+simulHomeDir+"/msh");				// Make and save the meshes in a separeted directory
  exec("mkdir "+simulHomeDir+"/local_sol");	// Make and save the local solutions in a separeted directory

  {ofstream fileParams (simulHomeDir+fileNameParams); // Save the parameters in separate file

    fileParams.fixed;
    fileParams << "cut,R0,Reff,fracRarc," << /*areaCst, <<*/ "h,Lc,lambda,La,eta,xi,zi,zeta,tscale,dt,dsave" 
              /*<< ",gamma"*/ <<  endl;
    fileParams << "rad,adim,um,adim," << /*adim, <<*/ "um,um,um,um,kPa*s,kPa*s/um^2,kPa/um,kPa,s,adim,adim,R0Lc_adim" 
              /*<< ",kPa*um"*/ << endl;
    fileParams << cut 		<< "," << R0 		 << "," << Reff	<< "," << fracRarc << ","
              /*<< areaCst  << ","*/ << h 		 << "," << Lc	  << "," << lambda 	 << ","
              << La 			<< "," << eta 	 << "," << xi 	<< "," << zi 			 << "," 
              << zeta 		<< "," << tscale << "," << dt 	<< "," << dsave /*<< "," << gamma*/ << endl;// 
  }
  // Generate a separate file for the global variables (integrates ones)
  {ofstream fileGlobalSol (simulHomeDir+fileNameGlobalSol);	
    //fileGlobalSol.fixed;
    fileGlobalSol	<< "Time,Xcm,Ycm,Pxcm,Pycm,dPxcmdt,dPycmdt,Vxcm,Vycm,Axcm,Aycm,Area,dAreadt,Ix,Iy,dIxdt,dIydt,avgDivV,divTermsX,divTermsY" << endl;
  }
} 
//---------------------------------------------------------------------------------------------------------------------

// Console Log
cout << "Simul: " << simulNames[iSimul] << ", saving = " << bsave << endl;
cout << "a (La/Lc) = " << a << ", b (R0/lambda) = " << b << ", c (R0/Lc) = " << c << ", tscale = " << tscale << endl;  


// Define the macros --------------------------------------------------------------------------------------------------
macro pD [pDx, pDy] //                              // P2 extension for Dirichlet data
macro p [px, py] //                                 // Polarity vector field
macro q [qx, qy] //                                 // Polarity test functions
macro v [vx, vy] //                                 // Velocity vector field
macro u [ux, uy] //                                 // Velocity test functions
macro normal [nx, ny] //                            // Normal vectors at the boundary (null outside of it)

macro dp [dpxdx,dpxdy,dpydx,dpydy] //               // Gradient of the polarity field
macro dq [dqxdx,dqxdy,dqydx,dqydy] //               // Gradient of the polarity test functions
macro dv [dvxdx,dvxdy,dvydx,dvydy] //               // Gradient of the velocity field
macro du [duxdx,duxdy,duydx,duydy] //               // Gradient of the velocity test functions
			
macro grad(u) [dx(u),dy(u)] //                      // Gradient of a sclar
macro Grad(ux,uy) [dx(ux),dy(ux),dx(uy),dy(uy)] //  // Gradient of a vector
macro GradT(ux,uy) [dx(ux),dx(uy),dy(ux),dy(uy)] // // Grad vector transpose
macro pp(px,py) [px*px,px*py,py*px,py*py] //        // Active stress tensor

macro Norm(u) dist(u#x,u#y) + 1.e-12 //             // Vector norm + offset to avoid 0-length vectors
//---------------------------------------------------------------------------------------------------------------------


//FEM spaces ----------------------------------------------------------------------------------------------------------
fespace Pol(Th, [P2, P2]);          // For polarity vector
fespace Pola(Th, P2 );              // For |p| (not essential, just visualization)
fespace dPol(Th,[P2,P2,P2,P2]);     // For the gradient of the polarity vector

fespace Vel(Th, [P1b, P1b]);        // For velocity vector
fespace dVel(Th,[P1b,P1b,P1b,P1b]); // For the gradient of the velocity vector
fespace prodVel(Th, P1b);

// fespace Vor(Th,P1b);								// To compute the vorticity & divergence
fespace Nh(Th,[P1,P1]);						  // For the corrected normal vector at the boundary
//---------------------------------------------------------------------------------------------------------------------

// Extract the new boundary for future computations and compute its orientation
real[int,int] bOut(3,1); real lOut = extractborder(Th, labelOut, bOut);
int nBnd = bOut.m-1; // instead of Th.nbe to avoid problems with mesh labels

// // Compute the orientation of the boundary
// // if r0 1st boundary point & r1 is the second one, orient = 1 if (r0-rCM) x (r1-r0) > 0 & -1 otherwise
// int orientBConn = ((Th.be(0)[1].x-Xcm0)*(Th.be(1)[1].y-Th.be(0)[1].y)-(Th.be(0)[1].y-Ycm0)*(Th.be(1)[1].x-Th.be(0)[1].x)) > 0 ? 1:-1;
// int orientBorder = ((bOut(0,0)-Xcm0)*(bOut(1,1)-bOut(1,0))-(bOut(1,0)-Ycm0)*(bOut(0,1)-bOut(0,0))) > 0 ? 1:-1;


// if (debug) {
//   cout << "Orientation = (" << orientBConn << ", " << orientBorder << ");" << endl;
// }

// Retrieve the indices of the verices of bOut with the same ordering -------------------------------------------------
int[int] bndIndices(nBnd+1);

int iTri;
for (int k=0; k<nBnd; k++){
  // Find the trinagle index of the kth bnd point
  iTri = Th(bOut(0,k),bOut(1,k)).nuTriangle;

  // Find index of the kth bnd point from its triangle index
  for (int jTri=0; jTri<3; jTri++) {
    if( abs(Th[iTri][jTri].x-bOut(0,k))<1e-12 && abs(Th[iTri][jTri].y-bOut(1,k))<1e-12){
      bndIndices(k) = Th[iTri][jTri];
    }
  }
}

bndIndices(nBnd) = bndIndices(0);
//---------------------------------------------------------------------------------------------------------------------


// Correction of the normal vectors at the boundary -------------------------------------------------------------------

Nh normal = [0,0]; // here the Dof of nx,ny are scramble.

real[int] nprev(2), npost(2), nmean(2);
int iBndElem; // index of the boundary element
real lenprev, lenpost;
nprev = [(bOut(1,0)-bOut(1,nBnd-1)),-(bOut(0,0)-bOut(0,nBnd-1))];
lenprev = sqrt(pow(nprev[0],2)+pow(nprev[1],2));

for (int k = 0; k < nBnd; k++){
  npost = [(bOut(1,k+1)-bOut(1,k)),-(bOut(0,k+1)-bOut(0,k))];
  lenpost = sqrt(pow(npost[0],2)+pow(npost[1],2));
  
  nmean = nprev*(lenpost/(lenpost+lenprev)) + npost*(lenprev/(lenprev+lenpost));
  nmean /= sqrt(pow(nmean[0],2)+pow(nmean[1],2));

  nx[](2*bndIndices(k))= nmean[0]; ny[](2*bndIndices(k)+1) = nmean[1];
  nprev = npost; lenprev = lenpost;

  // if (debug) {
  //   plot(Th,normal, value = true, fill = true, nbiso = 64, wait = true, cmm = "(nx,ny)");
  // }
}

if (debug) {
  plot(Th,normal, value = true, fill = true, nbiso = 64, wait = true, cmm = "(nx,ny);"/*+" orientation = ("+orientBConn+", "+orientBorder+");"*/);
}
//---------------------------------------------------------------------------------------------------------------------


// Define & solve the polarity equations ------------------------------------------------------------------------------
// P2 extension of polarity Dirichlet data
varf bndDirichlet(pD, q) = on(labelOut, pDx = nx) + on(labelOut, pDy = ny);
Pol pD=[0,0];
pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

// Bilinear and linear variational forms P (Modified Homogeneous Drirchlet problem for p-pD)
varf ap(p, q) = int2d(Th)(
    (grad(px)'*grad(qx) + grad(py)'*grad(qy))
    + c*c*(p'*q)
  ) + on(labelOut, px = 0.0) + on(labelOut, py = 0.0);

varf lp(p, q) = int2d(Th)(
    - (grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy))
    - c*c*(pD'*q)
  ) + on(labelOut, px = 0.0) + on(labelOut, py = 0.0);

// Assembly P
matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
real[int] bp = lp(0, Pol); // RHS

// P solution with vanishing Dirichlet data
real[int] solP(Pol.ndof);
//set(Ap,solver=sparsesolver);
solP=Ap^-1*bp;
Pol p=[0,0];
px[]=solP(0:Pol.ndof-1);

// P solution
p = p + pD;

if (debug) {
  // plot(Th,px, value = true, fill = true, nbiso = 64, wait = true, cmm = "px");
  // plot(Th,py, value = true, fill = true, nbiso = 64, wait = true, cmm = "py");
  plot(Th,p, value = true, fill = true, nbiso = 64, wait = true, cmm = "(px,py)");
	Pola pABS = sqrt(px(x,y)^2 + py(x,y)^2); // Abs(P)
  plot(Th,pABS, value = true, fill = true, nbiso = 64, wait = true, cmm = "|p|");
}
//---------------------------------------------------------------------------------------------------------------------


// Define & solve the velocity equation -------------------------------------------------------------------------------
// Bilinear and linear variational forms V
varf av(v, u) = int2d(Th)(
    ((Grad(vx,vy)+GradT(vx,vy))'*Grad(ux,uy)) 
    + pow(b,2)*(v'*u)
  ); // -viscosity -friction

varf lv(v, u) = int2d(Th)(
    + a*(pp(px,py)'*Grad(ux,uy)) 
    + c*(p'*u)
  ); //contractility +active traction

// Assembly V
matrix Av = av(Vel, Vel);
real[int] bv = lv(0, Vel);

// V solution
real[int] solV(Vel.ndof);
//set(Av,solver=sparsesolver);
solV=Av^-1*bv;
Vel v=[0,0];
vx[]=solV(0:Vel.ndof-1);

if (debug) {
  // plot(Th,vx, value = true, fill = true, nbiso = 64, wait = true, cmm = "vx");
  // plot(Th,vy, value = true, fill = true, nbiso = 64, wait = true, cmm = "vy");
  plot(Th,v, value = true, fill = true, nbiso = 64, wait = true, cmm = "(vx,vy)");
  Pola vABS = sqrt(vx(x,y)^2 + vy(x,y)^2); // Abs(P)
  plot(Th,vABS, value = true, fill = true, nbiso = 64, wait = true, cmm = "|v|");
}
//---------------------------------------------------------------------------------------------------------------------


// Compute the gradient of p for the posterior analysis ---------------------------------------------------------------
varf aGradP(dp, dq) = int2d(Th)(dp'*dq);
varf lGradP(dp, dq) = int2d(Th)(Grad(px,py)'*dq);

matrix AGradP = aGradP(dPol, dPol); // LHS matrix
real[int] bGradP = lGradP(0, dPol); // RHS vector

real[int] solGradP(dPol.ndof);
solGradP=AGradP^-1*bGradP;
dPol dp=[0,0,0,0];
dpxdx[]=solGradP(0:dPol.ndof-1);
//---------------------------------------------------------------------------------------------------------------------

// Compute the gradient of v for the posterior analysis ---------------------------------------------------------------
varf aGradV(dv, du) = int2d(Th)(dv'*du);
varf lGradV(dv, du) = int2d(Th)(Grad(vx,vy)'*du);

matrix AGradV = aGradV(dVel, dVel);	// LHS matrix
real[int] bGradV = lGradV(0, dVel); // RHS vector

real[int] solGradV(dVel.ndof);
solGradV=AGradV^-1*bGradV;
dVel dv=[0,0,0,0];
dvxdx[]=solGradV(0:dVel.ndof-1);
//---------------------------------------------------------------------------------------------------------------------


// Compute and plot friction -----------------------------------------------------------------------------------------------
varf aFrict(frict, testFrict) = int2d(Th)(frict*testFrict);
varf lFrict(frict, testFrict) = int2d(Th)((xiParallel+.5*(xiAntiParallel-xiParallel)*(1-(vx*px + vy*py)/(Norm(v)*Norm(p))))*testFrict);

matrix AFrict = aFrict(prodVel, prodVel);
real[int] bFrict = lFrict(0, prodVel);

real[int] solFrict(prodVel.ndof);
solFrict = AFrict^-1*bFrict;
prodVel frict = 0;
frict[] = solFrict(0:prodVel.ndof-1);

if (debug) {
  plot(Th,frict, value = true, fill = true, nbiso = 64, wait = true, cmm = "xi(y,Ycm)");
}
//---------------------------------------------------------------------------------------------------------------------

// Compute the intial values of the global variables ------------------------------------------------------------------
real Areai = Area0;	                            // Current area
real AreaP = Areai;	                            // Previous area
real dAreadt = (Areai-AreaP)/dt;                // time-derivative of the area (backward)

real Xcm = Xcm0;                                // Current x of the center of mass (x_cm)
real Ycm = Ycm0;                                // Current y of the center of mass (y_cm)
real[int] XcmP = [Xcm0,Xcm0];                   // Previous x_cms (-dt & -2*dt)
real[int] YcmP = [Ycm0,Ycm0];                   // Previous y_cms (-dt & -2*dt)
real Vxcm = (Xcm-XcmP[0])/dt;                   // Center of mass x velocity (backward)
real Vycm = (Ycm-YcmP[0])/dt;                   // Center of mass y velocity (backward)
real Axcm = (Xcm-2.*XcmP[0]+XcmP[1])/pow(dt,2); // Center of mass x acceleration (2nd order backward)
real Aycm = (Ycm-2.*YcmP[0]+YcmP[1])/pow(dt,2); // Center of mass y acceleration (2nd order backward)

real Pxcm = int2d(Th)(px)/Areai;                // Current P_x cm
real Pycm = int2d(Th)(py)/Areai;                // Current P_y cm
real PxcmP = Pxcm;                              // Previous P_x cm
real PycmP = Pycm;                              // Previous P_y cm
real dPxcmdt = (Pxcm-PxcmP)/dt;                 // time-derivative of P_x cm (backward)
real dPycmdt = (Pycm-PycmP)/dt;                 // time-derivative of P_y cm (backward)

real Ix = int2d(Th)(pow(y-Ycm,2))/Areai;	      // Current 2nd Moment of area with respect to x axis at the CM
real Iy = int2d(Th)(pow(x-Xcm,2))/Areai;	      // Current 2nd Moment of area with respect to y axis at the CM
real IxP = Ix;                                  // Previous 2n Moment of x
real IyP = Iy;                                  // Previous 2n Moment of y
real dIxdt = (Ix-IxP)/dt;                       // time-derivative of Ix (backward)
real dIydt = (Iy-IyP)/dt;                       // time-derivative of Iy (backward)

real avgDivV = int2d(Th)(dvxdx+dvydy)/Areai;                  // Average divergergence of the velocity
real divTermsX = int2d(Th)(x*((dvxdx+dvydy)-avgDivV))/Areai;	// Current value of the Div terms of V_x cm
real divTermsY = int2d(Th)(y*((dvxdx+dvydy)-avgDivV))/Areai;	// Current value of the Div terms of V_y cm
//---------------------------------------------------------------------------------------------------------------------


// Time iteration -----------------------------------------------------------------------------------------------------
for (int iterTime=0 ; iterTime<NiterTime ; iterTime++) {

  if (iterTime % 100 == 0 && iterTime > 0) {
    // Console log every 100 iterations
    cout << iterTime << " out of " << NiterTime << " iterations completed" << endl;
  }

  // Extract the new boundary for future computations and compute its orientation
  lOut = extractborder(Th, labelOut, bOut);
  nBnd = bOut.m-1; // instead of Th.nbe to avoid problems with mesh labels

  // Compute the orientation of the boundary
  // if r0 1st boundary point & r1 is the second one, orient = 1 if (r0-rCM) x (r1-r0) > 0 & -1 otherwise
  // orientBConn = ((Th.be(0)[1].x-Xcm0)*(Th.be(1)[1].y-Th.be(0)[1].y)-(Th.be(0)[1].y-Ycm0)*(Th.be(1)[1].x-Th.be(0)[1].x)) > 0 ? 1:-1;
  // orientBorder = ((bOut(0,0)-Xcm0)*(bOut(1,1)-bOut(1,0))-(bOut(1,0)-Ycm0)*(bOut(0,1)-bOut(0,0))) > 0 ? 1:-1;
  // if (debug) {
  //   cout << "Orientation = (" << orientBConn << ", " << orientBorder << ");" << endl;
  // }


  // Retrieve the indices of the verices of bOut with the same ordering -----------------------------------------------
  int[int] bndIndices(nBnd+1);

  int iTri;
  for (int k=0; k<nBnd; k++){
    // Find the trinagle index of the kth bnd point
    iTri = Th(bOut(0,k),bOut(1,k)).nuTriangle;

    // Find index of the kth bnd point from its triangle index
    for (int jTri=0; jTri<3; jTri++) {
      if( abs(Th[iTri][jTri].x-bOut(0,k))<1e-12 && abs(Th[iTri][jTri].y-bOut(1,k))<1e-12){
        bndIndices(k) = Th[iTri][jTri];
      }
    }
  }

  bndIndices(nBnd) = bndIndices(0);
  //-------------------------------------------------------------------------------------------------------------------


  // Correction of the normal vectors at the boundary -----------------------------------------------------------------
  Nh normal = [0,0]; // here the Dof of nx,ny are scramble.

  real[int] nprev(2), npost(2), nmean(2);
  int iBndElem; // index of the boundary element
  real lenprev, lenpost;
  nprev = [(bOut(1,0)-bOut(1,nBnd-1)),-(bOut(0,0)-bOut(0,nBnd-1))];
  lenprev = sqrt(pow(nprev[0],2)+pow(nprev[1],2));

  for (int k = 0; k < nBnd; k++){
    npost = [(bOut(1,k+1)-bOut(1,k)),-(bOut(0,k+1)-bOut(0,k))];
    lenpost = sqrt(pow(npost[0],2)+pow(npost[1],2));
    
    nmean = nprev*(lenpost/(lenpost+lenprev)) + npost*(lenprev/(lenprev+lenpost));
    nmean /= sqrt(pow(nmean[0],2)+pow(nmean[1],2));

    nx[](2*bndIndices(k))= nmean[0]; ny[](2*bndIndices(k)+1) = nmean[1];
    nprev = npost; lenprev = lenpost;

    // if (debug) {
    //   plot(Th,normal, value = true, fill = true, nbiso = 64, wait = true, cmm = "(nx,ny)");
    // }
  }
  //-------------------------------------------------------------------------------------------------------------------

  // Solve the polarity equation --------------------------------------------------------------------------------------
  // P2 extension of polarity Dirichlet data
  varf bndDirichlet(pD, q) = on(labelOut, pDx = nx) + on(labelOut, pDy = ny);
  Pol pD=[0,0];
  pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

  // Assembly P
  varf lp(p, q) = int2d(Th)(
      - (grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy)) 
      - c*c*(pD'*q)
    ) + on(labelOut, px = 0.0) + on(labelOut, py=0.0);

  matrix Ap = ap(Pol, Pol, tgv = -2); 	// LHS matrix
  real[int] bp = lp(0, Pol); 			// RHS

  // P solution with vanishing Dirichlet data
  real[int] sol(Pol.ndof);
  //set(Ap,solver=sparsesolvenetr);
  sol=Ap^-1*bp;
  Pol p=[0,0];
  px[]=sol(0:Pol.ndof-1);

  // P solution
  p = p + pD;
  //-------------------------------------------------------------------------------------------------------------------


  // Solve the velocity equation --------------------------------------------------------------------------------------
  // Assembly V
  varf lv(v, u) = int2d(Th)(
      + a*(pp(px,py)'*Grad(ux,uy))
      + c*(p'*u)
    ); //contractility + active traction

  matrix Av = av(Vel, Vel);  			// LHS matrix
  real[int] bv = lv(0, Vel);			// RHS

  // V solution
  real[int] solV(Vel.ndof);
  //set(Av,solver=sparsesolver);
  solV=Av^-1*bv;
  Vel v=[0,0];
  vx[]=solV(0:Vel.ndof-1);
  //-------------------------------------------------------------------------------------------------------------------


  // Compute the gradient of p for the posterior analysis -------------------------------------------------------------
  varf aGradP(dp, dq) = int2d(Th)(dp'*dq);
  varf lGradP(dp, dq) = int2d(Th)(Grad(px,py)'*dq);

  matrix AGradP = aGradP(dPol, dPol);		// LHS matrix
  real[int] bGradP = lGradP(0, dPol);	// RHS vector

  real[int] solGradP(dPol.ndof);
  solGradP=AGradP^-1*bGradP;
  dPol dp=[0,0,0,0];
  dpxdx[]=solGradP(0:dPol.ndof-1);
  //-------------------------------------------------------------------------------------------------------------------

  
  // Compute the gradient of v for the posterior analysis -------------------------------------------------------------
  varf aGradV(dv, du) = int2d(Th)(dv'*du);
  varf lGradV(dv, du) = int2d(Th)(Grad(vx,vy)'*du);

  matrix AGradV = aGradV(dVel, dVel);	// LHS matrix
  real[int] bGradV = lGradV(0, dVel);	// RHS vector

  real[int] solGradV(dVel.ndof);
  solGradV=AGradV^-1*bGradV;
  dVel dv=[0,0,0,0];
  dvxdx[]=solGradV(0:dVel.ndof-1);
  //-------------------------------------------------------------------------------------------------------------------


  // Compute the global variables -------------------------------------------------------------------------------------
  Areai = Th.measure;	// Current area
  dAreadt = (Areai-AreaP)/dt; // time-derivative of the area (backward)

  Xcm = int2d(Th)(x)/Areai;	                 // Current Xcm
  Ycm = int2d(Th)(y)/Areai;	                 // Current Ycm
  Vxcm = (Xcm-XcmP[0])/dt;                   // Center of mass x velocity (backward)
  Vycm = (Ycm-YcmP[0])/dt;                   // Center of mass y velocity (backward)
  Axcm = (Xcm-2.*XcmP[0]+XcmP[1])/pow(dt,2); // Center of mass x acceleration (2nd order backward)
  Aycm = (Ycm-2.*YcmP[0]+YcmP[1])/pow(dt,2); // Center of mass y acceleration (2nd order backward)

  Pxcm = int2d(Th)(px)/Areai;	               // Current P_x cm
  Pycm = int2d(Th)(py)/Areai;	               // Current P_y cm
  dPxcmdt = (Pxcm-PxcmP)/dt;                 // time-derivative of P_x cm (backward)
  dPycmdt = (Pycm-PycmP)/dt;                 // time-derivative of P_y cm (backward)
  
  Ix = int2d(Th)(pow(y-Ycm,2));	             // 2nd Moment of area with respect to x axis at the CM
  Iy = int2d(Th)(pow(x-Xcm,2));	             // 2nd Moment of area with respect to y axis at the CM
  dIxdt = (Ix-IxP)/dt;                       // time-derivative of Ix (backward)
  dIydt = (Iy-IyP)/dt;                       // time-derivative of Iy (backward)

  avgDivV = int2d(Th)(dvxdx+dvydy)/Areai;								// Average divergergence of the velocity
  divTermsX = int2d(Th)(x*(dvxdx+dvydy-avgDivV))/Areai;	// Current value of the Div terms of V_x cm
  divTermsY = int2d(Th)(y*(dvxdx+dvydy-avgDivV))/Areai;	// Current value of the Div terms of V_y cm
  //-------------------------------------------------------------------------------------------------------------------

  // Export data ------------------------------------------------------------------------------------------------------
  if(iterTime % dsave == 0 && bsave==1){

    string simulHomeDir = rootDir+"/"+simulNames[iSimul];
    string fileNameGlobalSol = "/global_sol.csv";
    string fileNameLocalSol = "/local_sol/sol_"+(1000000+iterTime)+".txt";
    string fileNameMsh = "/msh/mesh_"+(1000000+iterTime)+".msh";

    // Save {px, py, vx, vy, dpxdx, dpxdy, dpydx, dpydy, dvxdx, dvxdy, dvydx, dvydy} on each vertex:
    // Memory efficient method, but needs connectivity data to reconstruct the mesh
    {ofstream fileLocalSols (simulHomeDir+fileNameLocalSol);
      
      fileLocalSols.fixed;
      int NbVertices = Th.nv;
      fileLocalSols << "# LocalSolutions" << endl
                    << "# NumFields: " << 12 << "	NumberVertices: " << NbVertices /*<< " cut: " << cut*/ << " a: " << a << " b: " << b << " c: " << c << endl
                    << "# px	py	vx	vy	dpxdx	dpxdy	dpydx	dpydy	dvxdx	dvxdy	dvydx	dvydy" << endl;
      for (int i = 0; i < NbVertices; i++){
        fileLocalSols << px(Th(i).x,Th(i).y) 		<< "	" << py(Th(i).x,Th(i).y) 		<< "	"  // {px,py}
                      << vx(Th(i).x,Th(i).y) 		<< "	" << vy(Th(i).x,Th(i).y) 		<< "	"	 // {vx,vy}
                      << dpxdx(Th(i).x,Th(i).y) << "	" << dpxdy(Th(i).x,Th(i).y) << "	"	 //	{dpxdx,dpxdy}
                      << dpydx(Th(i).x,Th(i).y) << "	" << dpydy(Th(i).x,Th(i).y) << "	"	 // {dpydx,dpydy}
                      << dvxdx(Th(i).x,Th(i).y) << "	" << dvxdy(Th(i).x,Th(i).y) << "	"	 // {dvxdx,dvxdy}
                      << dvydx(Th(i).x,Th(i).y) << "	" << dvydy(Th(i).x,Th(i).y) << endl; // {dvydx,dvydy}
      }
    }

    // Save Global Data (variables integratet over the domain)
    {ofstream fileGlobalSol (simulHomeDir+fileNameGlobalSol, append);
      
      fileGlobalSol.fixed;
      fileGlobalSol	<< iterTime*dt << "," << Xcm 		 << "," << Ycm 			<< "," << Pxcm 			<< "," << Pycm 			<< ","
                    << dPxcmdt 		 << "," << dPycmdt << "," << Vxcm 		<< "," << Vycm 			<< "," << Axcm 			<< ","
                    << Aycm 			 << "," << Areai 	 << "," << dAreadt 	<< "," << Ix 				<< "," << Iy 				<< ","
                    << dIxdt 			 << "," << dIydt 	 << "," << avgDivV 	<< "," << divTermsX << "," << divTermsY << endl;
    }

    // save the last mesh
    savemesh(Th,simulHomeDir+fileNameMsh);
  }
  //-------------------------------------------------------------------------------------------------------------------


  // Plot v -----------------------------------------------------------------------------------------------------------
  if (debug) { // Show it always, regardless of the verbosity
  Pola vABS = sqrt(vx(x,y)^2 + vy(x,y)^2);
  Pola pABS = sqrt(px(x,y)^2 + py(x,y)^2);
  plot(/*Th,[NDerP1,NDerP2],/*CurlV,pABS*/normal,vABS, 
    value = true, 
    fill = true, 
    nbiso = 64, 
    wait = false, 
    bb=[[-2,-2],[2,2]],
    cmm = "iTime="+(iterTime)+"; "
      +"t="+(dt*iterTime)+"; "
      /*+"Orientation=("+orientBConn+", "+orientBorder+"); "*/
      +"A/A0="+(Areai/Area0)+"; "
      +"Rcm(t)-Rcm(0)=("+(Xcm-Xcm0)+","+(Ycm-Ycm0)+"); "
      +"Vcm(t)=("+Vxcm+","+Vycm+"); "
      +"(c/b)Pcm(t)=("+(c/b)*Pxcm+","+(c/b)*Pycm+");"
  );
  }
  //-------------------------------------------------------------------------------------------------------------------


  // Update previous global variables ---------------------------------------------------------------------------------
  AreaP = Areai;	                  // Previous area
  XcmP[1] = XcmP[0]; XcmP[0] = Xcm;	// Previous x_cms (-dt & -2*dt)
  YcmP[1] = YcmP[0]; YcmP[0] = Ycm;	// Previous y_cms (-dt & -2*dt)
  PxcmP = Pxcm;                     // Previous P_x cm
  PycmP = Pycm;                     // Previous P_y cm
  IxP = Ix;                         // Previous 2n Moment of x
  IyP = Iy;                         // Previous 2n Moment of y
  //-------------------------------------------------------------------------------------------------------------------


  // Remeshing --------------------------------------------------------------------------------------------------------
  try{
    // Move mesh
    //real minT0 = checkmovemesh(Th, [x, y]); // to check for flipped triangles
    // real minT = checkmovemesh(Th, [x+dt*vx,y+dt*vy]);
    // cout << "Min triangle area before: "+minT0+" & after: "+minT<<endl;
    Th = movemesh(Th,[x+dt*vx,y+dt*vy]);
    lOut = extractborder(Th, labelOut, bOut); // Extract border

    // Move boundary test, problems with varying boundary arch length
    /*{
      cout << bOut.m << endl;
      Move the boundary
      for(int i=0; i<nBnd; i++){
        bOut(0,i) += dt*vx(bOut(0,i));
        bOut(1,i) += dt*vy(bOut(1,i)); 
      }
    }*/

    Th = closedRemesh(bOut,lOut,bOut.m-1,bLayerThickness,obd,ibd,labelOut,.5, keepPoints,1);
  }
  catch(...) {
    cout << "ERROR: Simulation "+simulNames[iSimul]+" stopped after "+iterTime+" iterations due to a remeshing error" << endl;
    err = 1;
    break;
  }
  //-------------------------------------------------------------------------------------------------------------------


  // Stop simulations for big or small enough areas -------------------------------------------------------------------
  if((Areai > rateMaxArea*Area0) || (Areai < rateMinArea*Area0)){
    cout << "WARNING: Simulation "+simulNames[iSimul]+" stopped after "+iterTime+" iterations due to too big/small area" << endl;
    err = 1;
    break;
  }
  //-------------------------------------------------------------------------------------------------------------------
}

if (!err){
  cout << "Simulation"+simulNames[iSimul]+" finished without errors" << endl;
}
