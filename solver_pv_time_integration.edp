// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

//include <iostream>;
verbosity=0;

int NumSimul = 19;
string rootDir = "/home/joan/Documents/Tesi_doct/Spontaneous_tissue_motility/perturabtions_progressive_circ";
string pathDir;

// Physiscal Parameters
real cut;						   			// Angular length of the cutted portion of the circle
real Lc = .2;								// Nematic length, sqrt(K/a)
real lambda = 10.; 					// Hydodynamic length, sqrt(eta/xi)
real La = 1.; 							// Active length, |zeta|/zi
real Rc = 0.5*(3*Lc+La);		// Critical radius
real R0 = 1.;								// Effective radius
real Ri;										// Adimensionalized initial radius of the domain, depends on cut
real tau = 50.;							// Timescale corresponding to the advance of a flat front, eta/(zi*Lc)

// Adimensionalized Parameters
real a = La/Lc; 	    			// Active and Nematic length ratio
real b = pow(R0/lambda,2);	// R0 and hydrodynamic length ratio
real c = R0/Lc; 		 		 		// R0 and nematic length ratio

// Numerical Parameters
real obd = 50.*R0;  				// Outer boundary mesh density
real ibd = 15*R0;	 					// Inner boundary mesh density
real dt = 0.05/tau;	 				// Time step
int Niter = 401; 						// Number of iterations

// Save parameters
bool bsave = 1;   					// To save or not
int dsave = 10;   					// Save frame gap

ofstream pathFile ("Paths.txt");

// Simulations Loop, each one has different initial conditions
for (int i=15; i<NumSimul; i++){

	cut = (i+1)*pi/10.; // Initial cut for each simulation
	Ri = sqrt(2*pi/(2*pi - cut + sin(cut))); // formula derived from the shape of the domain

	cout << "Simulation " << (i+1) << ", cut = " << cut/pi << "pi rad\n";

	if(bsave){
		// the results folder
		pathDir = rootDir+"/"+(i+1)+"pi10";
		pathFile << pathDir << endl;
		exec("mkdir "+pathDir);
		{ ofstream ff (pathDir+"/Params.csv") ;
			 ff.fixed;
			 ff << "L_c,L_a,lambda,R0,Ri,tau,dt,dsave" << endl ;//
			 ff << Lc<<","<<La<<","<<lambda<<","<<R0<<","<<Ri<<","<<tau<<","<<dt<<","<<dsave<< endl ;
		}
	}

	mesh T,Tb;
	if(Ri*(1-cos(pi-cut/2.)) > 2*Lc/R0){ // Ensures enough space for Lc
		real t0 = (pi-cut)/2.;
		real t0L = -asin((Lc/R0-Ri*sin(t0))/(Ri-Lc/R0));
		border Gamma(t=-t0,pi+t0){x=Ri*cos(t);y=Ri*sin(t);label=1;}
		border GammaB(t=-Ri*cos(t0),Ri*cos(t0)){x=t;y=-Ri*sin(t0);label=1;}
	  border Gamma2(t=-t0L,pi+t0L){x=(Ri-Lc/R0)*cos(t);y=(Ri-Lc/R0)*sin(t);label=2;}
		border Gamma2B(t=-(Ri-Lc/R0)*cos(t0L),(Ri-Lc/R0)*cos(t0L)){x=t;y=Lc-Ri*sin(t0);label=2;}
	  T=buildmesh(Gamma(obd*Ri*(pi+2*t0))+GammaB(obd*2*Ri*cos(t0))+Gamma2(ibd*(Ri-Lc/R0)*(pi+2*t0L))+Gamma2B(ibd*2*(Ri-Lc/R0)*cos(t0L)));
		T=change(T, rmInternalEdges=1);
		Tb=emptymesh(T);
	}
	else {
		cout << "The domain with R0 = "+R0+"; Lc = "+Lc+"; angle cut = "+cut+" is ill-posed." << endl;
		exit(1);
	}

	/* mesh T, Tb; // Circular domain
	{
		border Gamma(t=0,2*pi){x=R0*cos(t);y=R0*sin(t);label=1;}
		border Gamma2(t=0,2*pi){x=(R0-Lc)*cos(t);y=(R0-Lc)*sin(t);label=2;}
		T=buildmesh(Gamma(obd*R0*2*pi)+Gamma2(ibd*(R0-Lc)*2*pi));
		T=change(T, rmInternalEdges=1);
		Tb=emptymesh(T);
	} */
	//mesh T = square(10, 10);

	real Volume0=int2d(T)(1.); // Inital Volume of the Fluid Domain
	real Volume=Volume0;
	real Xcm0=int2d(T)(x)/Volume; //Initial x_cm
	real Ycm0=int2d(T)(y)/Volume; //Initial y_cm
	real XcmP=Xcm0;
	real YcmP=Ycm0;
	real Xcm=Xcm0;
	real Ycm=Ycm0;
	if (verbosity) {
		plot(T,value = true, fill = false, nbiso=64, wait=true, cmm = "adaptive mesh;  Vol0="+Volume0+",  (xcm0,yxm0)=("+Xcm0+","+Ycm0+")");
	}

	//FEM SPACES
	fespace Pol(T, [P2, P2]); 		// FOR POLARITY VECTOR
	fespace Pola(T, P2 ); 			// FOR |p| (not essential, just visualization)
	fespace Vel(T, [P1b, P1b]); 	// FOR VELOCITY VECTOR
	fespace Dh(T, P1); 				// FOR DISTANCE FUNCTION (REMESHING SCHEME) AND DATA EXPORTS

	//MACROS
	macro pD [pD1, pD2] 	// P2 EXTENSION DIRICHLET DATA
	macro p [p1, p2] 		// POLARITY VECTOR FIELD
	macro q [q1, q2] 		// POLARITY TEST FUNCTIONS
	macro V [V1, V2] 		// VELOCITY FIELD
	macro U [U1, U2] 		// VELOCITY TEST FUNCTIONS
	macro grad(u) [dx(u),dy(u)]							// GRADIENT OF SCALAR
	macro Grad(u1,u2) [dx(u1),dy(u1),dx(u2),dy(u2)] 	// GRADIENT OF VECTOR
	macro GradT(u1,u2) [dx(u1),dx(u2),dy(u1),dy(u2)] 	// GRAD VEC TRANSPOSE
	macro pp(p1,p2) [p1*p1,p1*p2,p2*p1,p2*p2] 			// ACTIVE STRESS TENSOR


	// P2 EXTENSION OF POLARITY DIRICHLET DATA
	varf bndDirichlet(p, q) = on(1, p1 = N.x) + on(1, p2 = N.y);
	Pol pD=[0,0];
	pD1[] = bndDirichlet(0, Pol, tgv = 1.0);

	if (verbosity) {
		plot(pD1, value = true, fill = true, nbiso=64, wait=true, cmm = "pDx");
		plot(pD2, value = true, fill = true, nbiso=64, wait=true, cmm = "pDy");
	}

	// BILINEAR AND LINEAR VARIATIONAL FORMS P (Modified Homogeneous Drirchlet problem for p-pD)
	varf ap(p, q) = int2d(T)(  grad(p1)'*grad(q1) + grad(p2)'*grad(q2) )  + int2d(T)(c*c*(p'*q)) + on(1, p1 = 0.0) + on(1, p2=0.0);
	varf lp(p, q) = -int2d(T)( grad(pD1)'*grad(q1) + grad(pD2)'*grad(q2) ) - int2d(T)(c*c*(pD'*q))  + on(1, p1 = 0.0) + on(1, p2=0.0);

	// ASSEMBLY P
	matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
	real[int] bp = lp(0, Pol); // RHS

	// P SOLUTION WITH VANISHING DIRICHLET DATA
	real[int] sol(Pol.ndof);
	//set(Ap,solver=sparsesolver);
	sol=Ap^-1*bp;
	Pol p=[0,0];
	p1[]=sol(0:Pol.ndof-1);

	if (verbosity) {
		plot(T,p1, value = true, fill = true, nbiso=64, wait=true, cmm = "dpx = px-pDx");
		plot(T,p2, value = true, fill = true, nbiso=64, wait=true, cmm = "dpy = py-pDy");
	}

	// P SOLUTION
	p = p + pD;

	if (verbosity) {
		plot(T,p1, value = true, fill = true, nbiso = 64, wait = true, cmm = "px");
		plot(T,p2, value = true, fill = true, nbiso = 64, wait = true, cmm = "py");
		plot(T,p, value = true, fill = true, nbiso = 64, wait = true, cmm = "(px,py)");
		// ABS P
		Pola pABS = sqrt(p1(x,y)^2 + p2(x,y)^2);
		plot(T,pABS, value = true, fill = true, nbiso = 64, wait = true, cmm = "|p|");
	}

	// EXPORT DATA
/*{	{ 	ofstream ff (pathDir+"/xy_pxpy.txt") ;
		ff.fixed;
		for ( int i=0;i< T.nt ;i ++) {
				for ( int j =0; j <3; j ++) {
					ff 	<< T [i][ j ].x<<" " <<T [i][ j ].y<<" "
						<< p1(T [i][ j ].x,T [i][ j ].y)<<" " << p2(T [i][ j ].x,T [i][ j ].y) << endl ;//
					ff <<"\n";
				}
		}
	}
}*/
	// BILINEAR AND LINEAR VARIATIONAL FORMS V
	varf av(V, U) = int2d(T)( ((Grad(V1,V2)+GradT(V1,V2))'*Grad(U1,U2)) )  + int2d(T)( b*(V'*U) ); //-viscosity-friction
	varf lv(V, U) = int2d(T)( -a*(pp(p1,p2)'*Grad(U1,U2)) ) + int2d(T)( c*(p'*U) ); //contractility+activetraction

	//ASSEMBLY V
	matrix Av = av(Vel, Vel);
	real[int] bv = lv(0, Vel);

	// V SOLUTION
	real[int] solV(Vel.ndof);
	//set(Av,solver=sparsesolver);
	solV=Av^-1*bv;
	Vel V=[0,0];
	V1[]=solV(0:Vel.ndof-1);

	if (verbosity) {
		plot(T,V1, value = true, fill = true, nbiso = 64, wait = true, cmm = "vx");
		plot(T,V2, value = true, fill = true, nbiso = 64, wait = true, cmm = "vy");
		plot(T,V, value = true, fill = true, nbiso = 64, wait = true, cmm = "(vx,vy)");
	}
	// ITERATE TIME
	for (int iter=0 ; iter<Niter ; iter++) {

		// P2 EXTENSION OF POLARITY DIRICHLET DATA
		varf bndDirichlet(p, q) = on(1, p1 = N.x) + on(1, p2 = N.y);
		Pol pD=[0,0];
		pD1[] = bndDirichlet(0, Pol, tgv = 1.0);

		// ASSEMBLY P
		varf lp(p, q) = -int2d(T)( grad(pD1)'*grad(q1) + grad(pD2)'*grad(q2) ) - int2d(T)(c*c*(pD'*q))  + on(1, p1 = 0.0) + on(1, p2=0.0);
		matrix Ap = ap(Pol, Pol, tgv = -2); 	// LHS MATRIX
		real[int] bp = lp(0, Pol); 			// RHS

		// P SOLUTION WITH VANISHING DIRICHLET DATA
		real[int] sol(Pol.ndof);
		//set(Ap,solver=sparsesolver);
		sol=Ap^-1*bp;
		Pol p=[0,0];
		p1[]=sol(0:Pol.ndof-1);
		// P SOLUTION
		p = p + pD;

		// ASSEMBLY V
		varf lv(V, U) = int2d(T)( -a*(pp(p1,p2)'*Grad(U1,U2)) ) + int2d(T)( c*(p'*U) );
		matrix Av = av(Vel, Vel);  			// LHS MATRIX
		real[int] bv = lv(0, Vel);			// RHS
		// V SOLUTION
		real[int] solV(Vel.ndof);
		//set(Av,solver=sparsesolver);
		solV=Av^-1*bv;
		Vel V=[0,0];
		V1[]=solV(0:Vel.ndof-1);

		real Volume=int2d(T)(1.); // CURRENT AREA
		real Xcm=int2d(T)(x)/Volume; // CURRENT Xcm
		real Ycm=int2d(T)(y)/Volume; // CURRENT Ycm
		real intpx=(lambda*lambda/tau)*int2d(T)(p1)/Volume; // SCALED Int p_x (TO COMPARE WITH Vcm_x)
		real intpy=(lambda*lambda/tau)*int2d(T)(p2)/Volume; //SCALED Int p_y (TO COMPARE WITH Vcm_x)
		// PLOT V
		if (verbosity) {
			plot(T,V, value = true, fill = true, nbiso = 64, wait = false, bb=[[-1.2*Ri,-1.2*Ri],[1.2*Ri,1.2*Ri]],
					cmm = "t="+(dt*iter)+";  Vol/Vol0="+(Volume/Volume0)+", (xcm,yxm)-(xcm0,yxm0)=("+(Xcm-Xcm0)+","+(Ycm-Ycm0)
												+"), (vx,vy)=("+(Xcm-XcmP)/dt+","+(Ycm-YcmP)/dt+")"
												+"), Vol^-1(xi/xi)int p=("+intpx+","+intpy+")" );
		}

		// EXPORT DATA
		if(iter % dsave == 0 && bsave==1){
					savemesh(T,pathDir+"/LastMesh.msh"); 					// TO LOAD AND RESTART SIMULATION FROM LAST CONFIGURATION
					ofstream ff (pathDir+"/Rend"+(1000000+iter)+".txt") ; 	// SAVE {x, y, p1(x,y), p2(x,y), V1(x,y), V2(x,y)} ON EACH TRIANGLE TRIPLET (convienient but many duplicates)
					ff.fixed;
					for ( int i=0;i< T . nt ;i ++){
						for ( int j =0; j <3; j ++){
							ff << T [i][ j ].x<<" " <<T [i][ j ].y<<" "
								<< p1(T [i][ j ].x,T [i][ j ].y)<<" " << p2(T [i][ j ].x,T [i][ j ].y)<<" "
								<< V1(T [i][ j ].x,T [i][ j ].y)<<" " << V2(T [i][ j ].x,T [i][ j ].y) << endl ;//
							ff <<"\n";
						}
					}
		}

		// MOVE MESH
	 	T = movemesh(T,[x+dt*V1,y+dt*V2]);

		// REMESHING - OPTIONAL (choose between A.1(a)-(c) for outer and between B.3(a)-(c) for inner)
			// A.1. GET OUTER BOUNDARY VERTICES (b1)
			real[int,int] b1(3,1); real l1=extractborder(T,1,b1); // l1 is the permiter of b1
			// A.2(a). LINEAR INTERPOLATION OF b1 (simple and robust, but bad for preserving shape integrity)
		/*	border Outer(t=0,1){ P=Curve(b1,t);label=1;}
			int nO = round(obd*l1);  */						// new number of elements (prescribed density obd)
			// A.2(b). VERTEX PRESERVING INTERPOLATION OF b1 (no remesh of outer boundary, probably best)
			border Outer(t=0,1){ P=Curve(b1,b1(2,round(t*(b1.m-1)))/l1);label=1;}
			int nO = b1.m-1; 								// keep number of elements
		    // A.2(c). SPLINE INTERPOLATION OF b1 (for remeshing outer boundary smoothly)
		/*	gslspline splineX(gslinterpakima, b1(2, :), b1(0, :)); 	// x(s) akima spline
			gslspline splineY(gslinterpakima, b1(2, :), b1(1, :)); 	// y(s) akima spline
			border Outer(t=0,l1){x=splineX(t);y=splineY(t);label=1;}
			int nO = round(obd*l1);  */						// new number of elements (prescribed density obd)
			// B.1. DISTANCE FUNCTION (d is the minimal distance to the boundary)
			varf vong(B, d)= on(1,B=1);
			real[int] ong=vong(0,Dh);
			Dh B =1, d;
			B[] = ong ? 0 : B[];
			distance(T,B,d[]);
			// B.2. GET NEW INNER BOUNDARY VERTICES (ISO is the contour d==Lc)
			real[int,int] ISO(3,1); int nc=isoline(T,d,iso=Lc,close=1,ISO,smoothing=Lc/2.,ratio=1.e-0);
			real l2=ISO(2,ISO.m-1); // l2 is the perimeter of ISO
			// B.3(a). LINEAR INTERPOLATION OF ISO (simple and robust)
			border Inner(t=0,1){ P=Curve(ISO,t);label=2;}
			int nI = round(ibd*l2); 						// new number of elements (prescribed density ibd)
			// B.3(b). VERTEX PRESERVING INTERPOLATION OF ISO (not ideal for this purpose, as we wish to impose uniform internal density)
		/*	border Inner(t=0,1){ P=Curve(ISO,ISO(2,round(t*(ISO.m-1)))/l2);label=2;}
			int nI = ISO.m-1;  */ 							// keep number of elements
			// B.3(c). SPLINE INTERPOLATION OF ISO (for remeshing inner boundary smoothly, probably overkill for this purpose)
		/*	gslspline splineXISO(gslinterpakima, ISO(2, :), ISO(0, :)); 	// x(s) akima spline
			gslspline splineYISO(gslinterpakima, ISO(2, :), ISO(1, :)); 	// y(s) akima spline
			border Inner(t=0,l2){x=splineXISO(t);y=splineYISO(t);label=2;}
			int nI = round(ibd*l2);  */						// new number of elements (prescribed density ibd)
			// C. BUILD NEW MESH
			T=buildmesh(Outer(nO)+Inner(nI),fixedborder=1);
			T=change(T,rmInternalEdges=1);

		XcmP=Xcm; // PREVIOUS Xcm
		YcmP=Ycm; // PREVIOUS Ycm
	}

}
