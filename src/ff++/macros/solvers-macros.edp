/*

*/

// computeGrad documentation
//
NewMacro computeGrad(du,u,Th,duSpace)
macro du [du#x,du#y] // // Result of Gradient(u).
duSpace du = [0,0];
{
  macro grad(u) [dx(u),dy(u)] // // Gradient of a scalar u.
  macro dut [dut#x,dut#y] //     // Test function to compute grad(u).

  varf aGrad(du, dut) = int2d(Th)(du'*dut);
  varf lGrad(du, dut) = int2d(Th)(grad(u)'*dut);

  matrix AGrad = aGrad(duSpace, duSpace);	// LHS matrix.
  real[int] bGrad = lGrad(0, duSpace);    // RHS vector.
  real[int] solGrad(duSpace.ndof);
  solGrad=AGrad^-1*bGrad;
  du#x[]=solGrad(0:duSpace.ndof-1);
}
EndMacro

// computeHess documentation
//
NewMacro computHess(d2u,u,Th,d2uSpace)
macro d2u [d2u#xx,d2u#xy,d2u#yx,d2u#yy] // // Result of Hessian(u).
d2uSpace d2u=[0,0,0,0];
{
  macro Hessian(u) [dxx(u),dxy(u),dyx(u),dyy(u)] //   // Hessian of a scalar u.
  macro d2ut [d2utxx,d2utxy,d2utyx,d2utyy]// // Test function for Hessian(u).

  varf aHess(d2u, d2ut) = int2d(Th)(d2u'*d2ut);
  varf lHess(d2u, d2ut) = int2d(Th)(Hessian(u)'*d2ut);

  matrix AHess = aHess(d2uSpace, d2uSpace);	// LHS matrix.
  real[int] bHess = lHess(0, d2uSpace);     // RHS vector.

  real[int] solHess(d2uSpace.ndof);
  solHess=AHess^-1*bHess;
  d2u#xx[]=solHess(0:d2uSpace.ndof-1);
}
EndMacro

// computeGradVect documentation
//
NewMacro computeGradVect(dv,v,Th,dvSpace)
macro dv [dv#xx,dv#xy,dv#yx,dv#yy] // // Result of Grad(v).
dvSpace dv=[0,0,0,0];
{
  macro Grad(v) [dx(v#x),dy(v#x),dx(v#y),dy(v#y)] // // Gradient of a vector.
  macro dvt [dvtxx,dvtxy,dvtyx,dvtyy]// // Test function to compute Grad(v).

  varf aGrad(dv, dvt) = int2d(Th)(dv'*dvt);
  varf lGrad(dv, dvt) = int2d(Th)(Grad(v)'*dvt);

  matrix AGrad = aGrad(dvSpace, dvSpace);  // LHS matrix.
  real[int] bGrad = lGrad(0, dvSpace);     // RHS vector.

  real[int] solGrad(dvSpace.ndof);
  solGrad=AGrad^-1*bGrad;

  dv##xx[]=solGrad(0:dvSpace.ndof-1);
}
EndMacro
