// Packages for advanced remeshing scheme
load "Curvature"
load "distance"
load "isoline"
load "gsl"

// Manage command-line arguments
include "getARGV.idp"

include "../lib/meshes.edp"; // Load the mesh generation functions
// Load the remeshing functions, used to adapt the messhes with a boundary layer
include "../lib/remeshing.edp";

bool debug = getARGV("-d", 0); // set to 1 to produce the plots.

// Define variables to characterize tha shapes
real Area0;
real Xcm0;
real Ycm0;
mesh Th;
bool PERIODIC;

NewMacro evaluateMesh(Th, plotLabel, PERIODIC)
cout << "  - "<< plotLabel << ": OK";

if (PERIODIC){
  cout << endl;
} else {
  // Custom mesh adaptation, create a boundary layer with a higher triangle 
  // density and a bulk with a lower one
  Th = closedRemesh(
    Th,bndLayerWidth,outerBndDensity,innerBndDensity,labelBnd,.5,0,1
  );
  cout << " --Bounday Layer: OK" << endl;
}

Area0 = Th.measure; // Area of the domain
Xcm0 = int2d(Th)(x)/Area0; // x-coord of the domain centroid
Ycm0 = int2d(Th)(y)/Area0; // y-coord of the domain centroid

if (debug) {
  plot(
    Th, value = true, fill = false, nbiso=64, wait=true, 
    cmm = plotLabel+";  A0="+Area0+",  (Xcm, Ycm)=("+Xcm0+", "+Ycm0+")"
  );
}
EndMacro

// Construct the meshes
cout << "Testing the meshes from lib/meshes.edp :" << endl;

// Common params
int outerBndDensity = 45;
int innerBndDensity = 15;
real symmAxis = pi/2;

real r0 = 1;
int labelBnd = 1;
real bndLayerWidth = 0.15;

// Closed meshes --------------------------------------------------------------
PERIODIC = 0;

// Test fourCurvesShape mesh
real rUp = r0;
real rDown = 0.5;
real rLeft = 0.25;
real rRight = 0.25;
real d = 0.5;

real[int] fourCurveShapeParameters = [rUp,rDown,rLeft,rRight,d,symmAxis];
int[int] fourCurveShapeLabels = [labelBnd];

Th = fourCurveShape(outerBndDensity, fourCurveShapeParameters, fourCurveShapeLabels);

evaluateMesh(Th, "Dense fourCurvesShape mesh", PERIODIC)

// Test oneCutSmooth mesh
real cut = 2*pi/3;
real fracRarc = 0.1;

real[int] oneCutSmoothParameters = [cut,r0,fracRarc,symmAxis];
int[int] oneCutSmoothLabels = [labelBnd];

Th = oneCutSmooth(outerBndDensity, oneCutSmoothParameters, oneCutSmoothLabels);

evaluateMesh(Th, "Dense oneCutSmooth mesh", PERIODIC)

// Test sinePerturb mesh
real Amp = 0.5;
real q = 3;

real[int] sinePerturbParameters = [r0,Amp,q,symmAxis];
int[int] sinePerturbLabels = [labelBnd];

Th = sinePerturb(outerBndDensity, sinePerturbParameters, sinePerturbLabels);

evaluateMesh(Th, "Dense sinePerturb mesh", PERIODIC)

// Test twoCurvesTriangle mesh
real rIn = 0.3;
real rOut = 0.35;

real[int] twoCurvesTriangleParameters = [r0,rIn,rOut,symmAxis];
int[int] twoCurvesTriangleLabels = [labelBnd];

Th = twoCurvesTriangle(outerBndDensity, twoCurvesTriangleParameters, twoCurvesTriangleLabels);

evaluateMesh(Th, "Dense twoCurvesTriangle mesh", PERIODIC)

// Test roundedTriangle mesh
real[int] sideLengths = [2, 5, 5];
real rRound = 0.1;

real[int] roundedTriangleParameters = [sideLengths[0], sideLengths[1], sideLengths[2], rRound];
int[int] roundedTriangleLabels = [labelBnd];

Th = roundedTriangle(outerBndDensity, roundedTriangleParameters, roundedTriangleLabels);

evaluateMesh(Th, "Dense roundedTriangle mesh", PERIODIC)

//-----------------------------------------------------------------------------

// Semi-periodic meshes -------------------------------------------------------
PERIODIC = 1;

// Test bufferSinusoidalSemiplane mesh
real Lx = 6;
real waveLength = 0.9;
Amp = 0.3;
real buff = 0.3;

int labelPerio1 = 1;
int labelPerio2 = 3;
int labelFree = 2;
int labelFixed = 4;

real[int] bufferSinusoidalSemiplaneParameters = [Lx, waveLength, Amp, buff];
int[int] bufferSinusoidalSemiplaneLabels = [labelPerio1, labelPerio2, labelFree, labelFixed];

Th = bufferSinusoidalSemiplane(outerBndDensity, bufferSinusoidalSemiplaneParameters, bufferSinusoidalSemiplaneLabels);

evaluateMesh(Th, "Dense bufferSinusoidalSemiplane mesh", PERIODIC)

